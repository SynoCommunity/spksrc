diff -uprN ../ffmpeg-4.3-023/libavformat/smoothstreamingenc.c ./libavformat/smoothstreamingenc.c
--- ../ffmpeg-4.3-023/libavformat/smoothstreamingenc.c	2020-06-15 14:54:24.000000000 -0400
+++ ./libavformat/smoothstreamingenc.c	2020-06-16 20:08:21.691804931 -0400
@@ -39,6 +39,8 @@
 #include "libavutil/mathematics.h"
 #include "libavutil/intreadwrite.h"
 
+#include "synoconfig.h"
+
 typedef struct Fragment {
     char file[1024];
     char infofile[1024];
@@ -77,6 +79,11 @@ typedef struct SmoothStreamingContext {
     OutputStream *streams;
     int has_video, has_audio;
     int nb_fragments;
+#ifdef SYNO_SMOOTH_STREAMING
+	char *fragment_url;
+	int fragment_length;
+	int seek_time;
+#endif
 } SmoothStreamingContext;
 
 static int ism_write(void *opaque, uint8_t *buf, int buf_size)
@@ -250,8 +257,13 @@ static int write_manifest(AVFormatContex
     avio_printf(out, ">\n");
     if (c->has_video) {
         int last = -1, index = 0;
-        avio_printf(out, "<StreamIndex Type=\"video\" QualityLevels=\"%d\" Chunks=\"%d\" Url=\"QualityLevels({bitrate})/Fragments(video={start time})\">\n", video_streams, video_chunks);
-        for (i = 0; i < s->nb_streams; i++) {
+#ifdef SYNO_SMOOTH_STREAMING
+	avio_printf(out, "<StreamIndex Type=\"video\" QualityLevels=\"%d\" Chunks=\"%d\" Url=\"%    sQualityLevels({bitrate})/Fragments(video={start time})\">\n", video_streams, video_chunks,
+					(NULL == c->fragment_url) ? "" :  c->fragment_url);
+#else
+		avio_printf(out, "<StreamIndex Type=\"video\" QualityLevels=\"%d\" Chunks=\"%d\" Url=\"QualityLevels({bitrate})/Fragments(video={start time})\">\n", video_streams, video_chunks);
+#endif
+		for (i = 0; i < s->nb_streams; i++) {
             OutputStream *os = &c->streams[i];
             if (s->streams[i]->codecpar->codec_type != AVMEDIA_TYPE_VIDEO)
                 continue;
@@ -264,8 +276,13 @@ static int write_manifest(AVFormatContex
     }
     if (c->has_audio) {
         int last = -1, index = 0;
-        avio_printf(out, "<StreamIndex Type=\"audio\" QualityLevels=\"%d\" Chunks=\"%d\" Url=\"QualityLevels({bitrate})/Fragments(audio={start time})\">\n", audio_streams, audio_chunks);
-        for (i = 0; i < s->nb_streams; i++) {
+#ifdef SYNO_SMOOTH_STREAMING
+avio_printf(out, "<StreamIndex Type=\"audio\" QualityLevels=\"%d\" Chunks=\"%d\" Url=\"%    sQualityLevels({bitrate})/Fragments(audio={start time})\">\n", audio_streams, audio_chunks,
+					(NULL == c->fragment_url) ? "" :  c->fragment_url);
+#else
+		avio_printf(out, "<StreamIndex Type=\"audio\" QualityLevels=\"%d\" Chunks=\"%d\" Url=\"QualityLevels({bitrate})/Fragments(audio={start time})\">\n", audio_streams, audio_chunks);
+#endif
+		for (i = 0; i < s->nb_streams; i++) {
             OutputStream *os = &c->streams[i];
             if (s->streams[i]->codecpar->codec_type != AVMEDIA_TYPE_AUDIO)
                 continue;
@@ -555,6 +572,14 @@ static int ism_flush(AVFormatContext *s,
                 return ret;
         }
 
+#ifdef SYNO_SMOOTH_STREAMING
+        if (0 != c->fragment_length) {
+                start_ts = (int64_t)((int64_t)os->nb_fragments * (int64_t)c->fragment_length * (int64_t)10000000);
+        }
+        if (0 != c->seek_time) {
+                start_ts += (int64_t)((int64_t)c->seek_time * (int64_t)10000000);
+        }
+#endif
         snprintf(header_filename, sizeof(header_filename), "%s/FragmentInfo(%s=%"PRIu64")", os->dirname, os->stream_type_tag, start_ts);
         snprintf(target_filename, sizeof(target_filename), "%s/Fragments(%s=%"PRIu64")", os->dirname, os->stream_type_tag, start_ts);
         copy_moof(s, filename, header_filename, moof_size);
@@ -640,7 +665,12 @@ static const AVOption options[] = {
     { "lookahead_count", "number of lookahead fragments", OFFSET(lookahead_count), AV_OPT_TYPE_INT, { .i64 = 2 }, 0, INT_MAX, E },
     { "min_frag_duration", "minimum fragment duration (in microseconds)", OFFSET(min_frag_duration), AV_OPT_TYPE_INT64, { .i64 = 5000000 }, 0, INT_MAX, E },
     { "remove_at_exit", "remove all fragments when finished", OFFSET(remove_at_exit), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, E },
-    { NULL },
+#ifdef SYNO_SMOOTH_STREAMING
+	{ "fragment_url", "set fragment url in manifest", OFFSET(fragment_url), AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, E },
+    { "fragment_length", "let file name of output fragment mp4 with the duration (in seconds)", OFFSET(fragment_length), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, E },
+    { "seek_time", "add seek time to fragment file (in seconds)", OFFSET(seek_time), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, E },
+#endif
+     { NULL },
 };
 
 static const AVClass ism_class = {
diff -uprN ../ffmpeg-4.3-023/synoconfig.h ./synoconfig.h
--- ../ffmpeg-4.3-023/synoconfig.h	2020-06-16 20:01:36.286633640 -0400
+++ ./synoconfig.h	2020-06-16 20:08:21.691804931 -0400
@@ -31,3 +31,17 @@
 #if defined(SYNO_VIDEOSTATION)
 #define SYNO_VIDEOSTATION_WEBM_SEEK_TIME
 #endif
+
+/* Add ffmpeg option for smooth streaming.
+ * -fragment_url:
+ *  This option can overwrite fragment url in Manifest for smooth streaming.
+ * -fragment_length:
+ *  Let file name of output fragment mp4 with this duration
+ *  This setting dependes on x264 option to make it work
+ * -seek_time:
+ *  Let file name fo output fragment mp4 start with this seek time
+ * See Video Station #659
+ */
+#if defined(SYNO_VIDEOSTATION)
+#define SYNO_SMOOTH_STREAMING
+#endif
