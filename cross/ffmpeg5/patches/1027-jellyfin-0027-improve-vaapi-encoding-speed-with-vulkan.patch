Index: jellyfin-ffmpeg/libavcodec/vaapi_encode.c
===================================================================
--- libavcodec/vaapi_encode.c
+++ libavcodec/vaapi_encode.c
@@ -136,7 +136,8 @@ static int vaapi_encode_make_misc_param_
 }
 
 static int vaapi_encode_wait(AVCodecContext *avctx,
-                             VAAPIEncodePicture *pic)
+                             VAAPIEncodePicture *pic,
+                             uint8_t wait)
 {
     VAAPIEncodeContext *ctx = avctx->priv_data;
     VAStatus vas;
@@ -156,8 +157,10 @@ static int vaapi_encode_wait(AVCodecCont
     if (ctx->has_sync_buffer_func) {
         vas = vaSyncBuffer(ctx->hwctx->display,
                            pic->output_buffer,
-                           VA_TIMEOUT_INFINITE);
-        if (vas != VA_STATUS_SUCCESS) {
+                           wait ? VA_TIMEOUT_INFINITE : 0);
+        if (vas == VA_STATUS_ERROR_TIMEDOUT) {
+            return AVERROR(EAGAIN);
+        } else if (vas != VA_STATUS_SUCCESS) {
             av_log(avctx, AV_LOG_ERROR, "Failed to sync to output buffer completion: "
                    "%d (%s).\n", vas, vaErrorStr(vas));
             return AVERROR(EIO);
@@ -165,11 +168,27 @@ static int vaapi_encode_wait(AVCodecCont
     } else
 #endif
     { // If vaSyncBuffer is not implemented, try old version API.
-        vas = vaSyncSurface(ctx->hwctx->display, pic->input_surface);
-        if (vas != VA_STATUS_SUCCESS) {
-            av_log(avctx, AV_LOG_ERROR, "Failed to sync to picture completion: "
-                "%d (%s).\n", vas, vaErrorStr(vas));
-            return AVERROR(EIO);
+        if (!wait) {
+            VASurfaceStatus surface_status;
+            vas = vaQuerySurfaceStatus(ctx->hwctx->display,
+                                    pic->input_surface,
+                                    &surface_status);
+            if (vas == VA_STATUS_SUCCESS &&
+                surface_status != VASurfaceReady &&
+                surface_status != VASurfaceSkipped) {
+                return AVERROR(EAGAIN);
+            } else if (vas != VA_STATUS_SUCCESS) {
+                av_log(avctx, AV_LOG_ERROR, "Failed to query surface status: "
+                    "%d (%s).\n", vas, vaErrorStr(vas));
+                return AVERROR(EIO);
+            }
+        } else {
+            vas = vaSyncSurface(ctx->hwctx->display, pic->input_surface);
+            if (vas != VA_STATUS_SUCCESS) {
+                av_log(avctx, AV_LOG_ERROR, "Failed to sync to picture completion: "
+                    "%d (%s).\n", vas, vaErrorStr(vas));
+                return AVERROR(EIO);
+            }
         }
     }
 
@@ -660,7 +679,7 @@ static int vaapi_encode_output(AVCodecCo
     uint8_t *ptr;
     int err;
 
-    err = vaapi_encode_wait(avctx, pic);
+    err = vaapi_encode_wait(avctx, pic, 1);
     if (err < 0)
         return err;
 
@@ -722,7 +741,7 @@ fail:
 static int vaapi_encode_discard(AVCodecContext *avctx,
                                 VAAPIEncodePicture *pic)
 {
-    vaapi_encode_wait(avctx, pic);
+    vaapi_encode_wait(avctx, pic, 1);
 
     if (pic->output_buffer_ref) {
         av_log(avctx, AV_LOG_DEBUG, "Discard output for pic "
@@ -1207,49 +1226,37 @@ int ff_vaapi_encode_receive_packet(AVCod
             return AVERROR(EAGAIN);
     }
 
-    if (ctx->has_sync_buffer_func) {
-        pic = NULL;
-
-        if (av_fifo_can_write(ctx->encode_fifo)) {
-            err = vaapi_encode_pick_next(avctx, &pic);
-            if (!err) {
-                av_assert0(pic);
-                pic->encode_order = ctx->encode_order +
-                    av_fifo_can_read(ctx->encode_fifo);
-                err = vaapi_encode_issue(avctx, pic);
-                if (err < 0) {
-                    av_log(avctx, AV_LOG_ERROR, "Encode failed: %d.\n", err);
-                    return err;
-                }
-                av_fifo_write(ctx->encode_fifo, &pic, 1);
-            }
-        }
-
-        if (!av_fifo_can_read(ctx->encode_fifo))
-            return err;
-
-        // More frames can be buffered
-        if (av_fifo_can_write(ctx->encode_fifo) && !ctx->end_of_stream)
-            return AVERROR(EAGAIN);
-
-        av_fifo_read(ctx->encode_fifo, &pic, 1);
-        ctx->encode_order = pic->encode_order + 1;
-    } else {
+    while (av_fifo_can_write(ctx->encode_fifo)) {
         pic = NULL;
         err = vaapi_encode_pick_next(avctx, &pic);
         if (err < 0)
-            return err;
-        av_assert0(pic);
-
-        pic->encode_order = ctx->encode_order++;
+            break;
 
+        av_assert0(pic);
+        pic->encode_order = ctx->encode_order +
+            av_fifo_can_read(ctx->encode_fifo);
         err = vaapi_encode_issue(avctx, pic);
         if (err < 0) {
             av_log(avctx, AV_LOG_ERROR, "Encode failed: %d.\n", err);
             return err;
         }
+
+        av_fifo_write(ctx->encode_fifo, &pic, 1);
     }
 
+    if (!av_fifo_can_read(ctx->encode_fifo))
+        return err;
+
+    if (av_fifo_can_write(ctx->encode_fifo) && !ctx->end_of_stream) {
+        av_fifo_peek(ctx->encode_fifo, &pic, 1, 0);
+        err = vaapi_encode_wait(avctx, pic, 0);
+        if (err < 0)
+            return err;
+    }
+
+    av_fifo_read(ctx->encode_fifo, &pic, 1);
+    ctx->encode_order = pic->encode_order + 1;
+
     err = vaapi_encode_output(avctx, pic, pkt);
     if (err < 0) {
         av_log(avctx, AV_LOG_ERROR, "Output failed: %d.\n", err);
@@ -2725,16 +2732,16 @@ av_cold int ff_vaapi_encode_init(AVCodec
 #if VA_CHECK_VERSION(1, 9, 0)
     // check vaSyncBuffer function
     vas = vaSyncBuffer(ctx->hwctx->display, VA_INVALID_ID, 0);
-    if (vas != VA_STATUS_ERROR_UNIMPLEMENTED) {
+    if (vas != VA_STATUS_ERROR_UNIMPLEMENTED)
         ctx->has_sync_buffer_func = 1;
-        ctx->encode_fifo = av_fifo_alloc2(ctx->async_depth,
-                                          sizeof(VAAPIEncodePicture *),
-                                          0);
-        if (!ctx->encode_fifo)
-            return AVERROR(ENOMEM);
-    }
 #endif
 
+    ctx->encode_fifo = av_fifo_alloc2(ctx->async_depth,
+                                      sizeof(VAAPIEncodePicture *),
+                                      0);
+    if (!ctx->encode_fifo)
+        return AVERROR(ENOMEM);
+
     return 0;
 
 fail:
Index: jellyfin-ffmpeg/libavcodec/vaapi_encode.h
===================================================================
--- libavcodec/vaapi_encode.h
+++ libavcodec/vaapi_encode.h
@@ -479,10 +479,9 @@ int ff_vaapi_encode_close(AVCodecContext
       OFFSET(common.desired_b_depth), AV_OPT_TYPE_INT, \
       { .i64 = 1 }, 1, INT_MAX, FLAGS }, \
     { "async_depth", "Maximum processing parallelism. " \
-      "Increase this to improve single channel performance. This option " \
-      "doesn't work if driver doesn't implement vaSyncBuffer function.", \
+      "Increase this to improve single channel performance.", \
       OFFSET(common.async_depth), AV_OPT_TYPE_INT, \
-      { .i64 = 2 }, 1, MAX_ASYNC_DEPTH, FLAGS }, \
+      { .i64 = 4 }, 1, MAX_ASYNC_DEPTH, FLAGS }, \
     { "max_frame_size", \
       "Maximum frame size (in bytes)",\
       OFFSET(common.max_frame_size), AV_OPT_TYPE_INT, \
