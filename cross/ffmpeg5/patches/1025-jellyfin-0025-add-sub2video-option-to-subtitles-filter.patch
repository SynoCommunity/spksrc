Index: jellyfin-ffmpeg/libavfilter/vf_subtitles.c
===================================================================
--- libavfilter/vf_subtitles.c
+++ libavfilter/vf_subtitles.c
@@ -56,10 +56,13 @@ typedef struct AssContext {
     char *force_style;
     int stream_index;
     int alpha;
+    int sub2video;
+    int last_image;
     uint8_t rgba_map[4];
     int     pix_step[4];       ///< steps per pixel for each plane of the main output
     int original_w, original_h;
     int shaping;
+    int64_t max_pts, max_ts_ms;
     FFDrawContext draw;
 } AssContext;
 
@@ -71,7 +74,12 @@ typedef struct AssContext {
     {"f",              "set the filename of file to read",                         OFFSET(filename),   AV_OPT_TYPE_STRING,     {.str = NULL},  0, 0, FLAGS }, \
     {"original_size",  "set the size of the original video (used to scale fonts)", OFFSET(original_w), AV_OPT_TYPE_IMAGE_SIZE, {.str = NULL},  0, 0, FLAGS }, \
     {"fontsdir",       "set the directory containing the fonts to read",           OFFSET(fontsdir),   AV_OPT_TYPE_STRING,     {.str = NULL},  0, 0, FLAGS }, \
-    {"alpha",          "enable processing of alpha channel",                       OFFSET(alpha),      AV_OPT_TYPE_BOOL,       {.i64 = 0   },         0,        1, FLAGS }, \
+    {"alpha",          "enable processing of alpha channel",                       OFFSET(alpha),      AV_OPT_TYPE_BOOL,       {.i64 = 0   },  0, 1, FLAGS }, \
+    {"sub2video",      "enable textual subtitle to video mode",                    OFFSET(sub2video),  AV_OPT_TYPE_BOOL,       {.i64 = 0   },  0, 1, FLAGS }, \
+    {"shaping",        "set shaping engine",                                       OFFSET(shaping),    AV_OPT_TYPE_INT,        {.i64 = ASS_SHAPING_COMPLEX }, -1, 1, FLAGS, "shaping_mode"}, \
+        {"auto",       NULL,              0, AV_OPT_TYPE_CONST, {.i64 = -1},                  INT_MIN, INT_MAX, FLAGS, "shaping_mode"}, \
+        {"simple",     "simple shaping",  0, AV_OPT_TYPE_CONST, {.i64 = ASS_SHAPING_SIMPLE},  INT_MIN, INT_MAX, FLAGS, "shaping_mode"}, \
+        {"complex",    "complex shaping", 0, AV_OPT_TYPE_CONST, {.i64 = ASS_SHAPING_COMPLEX}, INT_MIN, INT_MAX, FLAGS, "shaping_mode"}, \
 
 /* libass supports a log level ranging from 0 to 7 */
 static const int ass_libavfilter_log_level_map[] = {
@@ -157,6 +165,8 @@ static int config_input(AVFilterLink *in
     if (ass->shaping != -1)
         ass_set_shaper(ass->renderer, ass->shaping);
 
+    ass->max_pts = ass->max_ts_ms / (av_q2d(inlink->time_base) * 1000);
+
     return 0;
 }
 
@@ -187,18 +197,41 @@ static int filter_frame(AVFilterLink *in
     AVFilterLink *outlink = ctx->outputs[0];
     AssContext *ass = ctx->priv;
     int detect_change = 0;
-    double time_ms = picref->pts * av_q2d(inlink->time_base) * 1000;
+    int64_t time_ms = picref->pts * av_q2d(inlink->time_base) * 1000;
     ASS_Image *image = ass_render_frame(ass->renderer, ass->track,
                                         time_ms, &detect_change);
 
+    if (ass->sub2video) {
+        if (!image && !ass->last_image && picref->pts <= ass->max_pts && outlink->current_pts != AV_NOPTS_VALUE) {
+            av_log(ctx, AV_LOG_DEBUG, "sub2video skip pts:%"PRId64"\n", picref->pts);
+            av_frame_free(&picref);
+            return 0;
+        }
+        ass->last_image = image != NULL;
+    }
+
     if (detect_change)
-        av_log(ctx, AV_LOG_DEBUG, "Change happened at time ms:%f\n", time_ms);
+        av_log(ctx, AV_LOG_DEBUG, "Change happened at time ms:%"PRId64"\n", time_ms);
 
     overlay_ass_image(ass, picref, image);
 
     return ff_filter_frame(outlink, picref);
 }
 
+static void get_max_timestamp(AVFilterContext *ctx)
+{
+    AssContext *ass = ctx->priv;
+    int i;
+
+    ass->max_ts_ms = 0;
+    if (ass->track) {
+        for (i = 0; i < ass->track->n_events; i++) {
+            ASS_Event *event = ass->track->events + i;
+            ass->max_ts_ms = FFMAX(event->Start + event->Duration, ass->max_ts_ms);
+        }
+    }
+}
+
 static const AVFilterPad ass_inputs[] = {
     {
         .name             = "default",
@@ -220,10 +253,6 @@ static const AVFilterPad ass_outputs[] =
 
 static const AVOption ass_options[] = {
     COMMON_OPTIONS
-    {"shaping", "set shaping engine", OFFSET(shaping), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, 1, FLAGS, "shaping_mode"},
-        {"auto", NULL,                 0, AV_OPT_TYPE_CONST, {.i64 = -1},                  INT_MIN, INT_MAX, FLAGS, "shaping_mode"},
-        {"simple",  "simple shaping",  0, AV_OPT_TYPE_CONST, {.i64 = ASS_SHAPING_SIMPLE},  INT_MIN, INT_MAX, FLAGS, "shaping_mode"},
-        {"complex", "complex shaping", 0, AV_OPT_TYPE_CONST, {.i64 = ASS_SHAPING_COMPLEX}, INT_MIN, INT_MAX, FLAGS, "shaping_mode"},
     {NULL},
 };
 
@@ -247,6 +276,9 @@ static av_cold int init_ass(AVFilterCont
                ass->filename);
         return AVERROR(EINVAL);
     }
+
+    get_max_timestamp(ctx);
+
     return 0;
 }
 
@@ -268,8 +300,8 @@ const AVFilter ff_vf_ass = {
 static const AVOption subtitles_options[] = {
     COMMON_OPTIONS
     {"charenc",      "set input character encoding", OFFSET(charenc),      AV_OPT_TYPE_STRING, {.str = NULL}, 0, 0, FLAGS},
-    {"stream_index", "set stream index",             OFFSET(stream_index), AV_OPT_TYPE_INT,    { .i64 = -1 }, -1,       INT_MAX,  FLAGS},
-    {"si",           "set stream index",             OFFSET(stream_index), AV_OPT_TYPE_INT,    { .i64 = -1 }, -1,       INT_MAX,  FLAGS},
+    {"stream_index", "set stream index",             OFFSET(stream_index), AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, FLAGS},
+    {"si",           "set stream index",             OFFSET(stream_index), AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, FLAGS},
     {"force_style",  "force subtitle style",         OFFSET(force_style),  AV_OPT_TYPE_STRING, {.str = NULL}, 0, 0, FLAGS},
     {NULL},
 };
@@ -483,6 +515,8 @@ static av_cold int init_subtitles(AVFilt
         avsubtitle_free(&sub);
     }
 
+    get_max_timestamp(ctx);
+
 end:
     av_dict_free(&codec_opts);
     avcodec_free_context(&dec_ctx);
