Index: jellyfin-ffmpeg/libavfilter/vf_overlay_cuda.c
===================================================================
--- libavfilter/vf_overlay_cuda.c
+++ libavfilter/vf_overlay_cuda.c
@@ -50,6 +50,8 @@
 static const enum AVPixelFormat supported_main_formats[] = {
     AV_PIX_FMT_NV12,
     AV_PIX_FMT_YUV420P,
+    AV_PIX_FMT_P010,
+    AV_PIX_FMT_P016,
     AV_PIX_FMT_NONE,
 };
 
@@ -101,12 +103,15 @@ typedef struct OverlayCUDAContext {
     enum AVPixelFormat in_format_overlay;
     enum AVPixelFormat in_format_main;
 
+    const AVPixFmtDescriptor *in_desc_main;
+
     AVBufferRef *hw_device_ctx;
     AVCUDADeviceContext *hwctx;
 
     CUcontext cu_ctx;
     CUmodule cu_module;
-    CUfunction cu_func;
+    CUfunction cu_func_uchar;
+    CUfunction cu_func_ushort;
     CUstream cu_stream;
 
     FFFrameSync fs;
@@ -181,7 +186,10 @@ static int set_expr(AVExpr **pexpr, cons
 static int formats_match(const enum AVPixelFormat format_main, const enum AVPixelFormat format_overlay) {
     switch(format_main) {
     case AV_PIX_FMT_NV12:
-        return format_overlay == AV_PIX_FMT_NV12;
+    case AV_PIX_FMT_P010:
+    case AV_PIX_FMT_P016:
+        return format_overlay == AV_PIX_FMT_NV12 ||
+               format_overlay == AV_PIX_FMT_YUVA420P;
     case AV_PIX_FMT_YUV420P:
         return format_overlay == AV_PIX_FMT_YUV420P ||
                format_overlay == AV_PIX_FMT_YUVA420P;
@@ -196,11 +204,13 @@ static int formats_match(const enum AVPi
 static int overlay_cuda_call_kernel(
     OverlayCUDAContext *ctx,
     int x_position, int y_position,
-    uint8_t* main_data, int main_linesize,
+    CUdeviceptr main_data, int main_linesize,
     int main_width, int main_height,
-    uint8_t* overlay_data, int overlay_linesize,
+    int main_adj_x, int main_offset,
+    int main_depth, int main_shift,
+    CUdeviceptr overlay_data, int overlay_linesize,
     int overlay_width, int overlay_height,
-    uint8_t* alpha_data, int alpha_linesize,
+    CUdeviceptr alpha_data, int alpha_linesize,
     int alpha_adj_x, int alpha_adj_y) {
 
     CudaFunctions *cu = ctx->hwctx->internal->cuda_dl;
@@ -208,14 +218,18 @@ static int overlay_cuda_call_kernel(
     void* kernel_args[] = {
         &x_position, &y_position,
         &main_data, &main_linesize,
+        &main_adj_x, &main_offset,
+        &main_depth, &main_shift,
         &overlay_data, &overlay_linesize,
         &overlay_width, &overlay_height,
         &alpha_data, &alpha_linesize,
         &alpha_adj_x, &alpha_adj_y,
     };
 
+#define DEPTH_BYTES(depth) (((depth) + 7) / 8)
+
     return CHECK_CU(cu->cuLaunchKernel(
-        ctx->cu_func,
+        DEPTH_BYTES(main_depth) == 1 ? ctx->cu_func_uchar : ctx->cu_func_ushort,
         DIV_UP(main_width, BLOCK_X), DIV_UP(main_height, BLOCK_Y), 1,
         BLOCK_X, BLOCK_Y, 1,
         0, ctx->cu_stream, kernel_args, NULL));
@@ -290,11 +304,13 @@ static int overlay_cuda_blend(FFFrameSyn
 
     overlay_cuda_call_kernel(ctx,
         ctx->x_position, ctx->y_position,
-        input_main->data[0], input_main->linesize[0],
+        (CUdeviceptr)input_main->data[0], input_main->linesize[0],
         input_main->width, input_main->height,
-        input_overlay->data[0], input_overlay->linesize[0],
+        1, 0,
+        ctx->in_desc_main->comp[0].depth, ctx->in_desc_main->comp[0].shift,
+        (CUdeviceptr)input_overlay->data[0], input_overlay->linesize[0],
         input_overlay->width, input_overlay->height,
-        input_overlay->data[3], input_overlay->linesize[3], 1, 1);
+        (CUdeviceptr)input_overlay->data[3], input_overlay->linesize[3], 1, 1);
 
     // overlay rest planes depending on pixel format
 
@@ -302,29 +318,42 @@ static int overlay_cuda_blend(FFFrameSyn
     case AV_PIX_FMT_NV12:
         overlay_cuda_call_kernel(ctx,
             ctx->x_position, ctx->y_position / 2,
-            input_main->data[1], input_main->linesize[1],
+            (CUdeviceptr)input_main->data[1], input_main->linesize[1],
             input_main->width, input_main->height / 2,
-            input_overlay->data[1], input_overlay->linesize[1],
+            1, 0,
+            ctx->in_desc_main->comp[1].depth, ctx->in_desc_main->comp[1].shift,
+            (CUdeviceptr)input_overlay->data[1], input_overlay->linesize[1],
             input_overlay->width, input_overlay->height / 2,
             0, 0, 0, 0);
         break;
     case AV_PIX_FMT_YUV420P:
     case AV_PIX_FMT_YUVA420P:
-        overlay_cuda_call_kernel(ctx,
-            ctx->x_position / 2 , ctx->y_position / 2,
-            input_main->data[1], input_main->linesize[1],
-            input_main->width / 2, input_main->height / 2,
-            input_overlay->data[1], input_overlay->linesize[1],
-            input_overlay->width / 2, input_overlay->height / 2,
-            input_overlay->data[3], input_overlay->linesize[3], 2, 2);
-
-        overlay_cuda_call_kernel(ctx,
-            ctx->x_position / 2 , ctx->y_position / 2,
-            input_main->data[2], input_main->linesize[2],
-            input_main->width / 2, input_main->height / 2,
-            input_overlay->data[2], input_overlay->linesize[2],
-            input_overlay->width / 2, input_overlay->height / 2,
-            input_overlay->data[3], input_overlay->linesize[3], 2, 2);
+        {
+            int is_main_semi = ctx->in_format_main == AV_PIX_FMT_NV12 ||
+                               ctx->in_format_main == AV_PIX_FMT_P010 ||
+                               ctx->in_format_main == AV_PIX_FMT_P016;
+            int main_adj_x = is_main_semi ? 2 : 1;
+            int plane_v = is_main_semi ? 1 : 2;
+            overlay_cuda_call_kernel(ctx,
+                ctx->x_position / 2, ctx->y_position / 2,
+                (CUdeviceptr)input_main->data[1], input_main->linesize[1],
+                input_main->width / 2, input_main->height / 2,
+                main_adj_x, 0,
+                ctx->in_desc_main->comp[1].depth, ctx->in_desc_main->comp[1].shift,
+                (CUdeviceptr)input_overlay->data[1], input_overlay->linesize[1],
+                input_overlay->width / 2, input_overlay->height / 2,
+                (CUdeviceptr)input_overlay->data[3], input_overlay->linesize[3], 2, 2);
+
+            overlay_cuda_call_kernel(ctx,
+                ctx->x_position / 2 , ctx->y_position / 2,
+                (CUdeviceptr)input_main->data[plane_v], input_main->linesize[plane_v],
+                input_main->width / 2, input_main->height / 2,
+                main_adj_x, 1,
+                ctx->in_desc_main->comp[plane_v].depth, ctx->in_desc_main->comp[plane_v].shift,
+                (CUdeviceptr)input_overlay->data[2], input_overlay->linesize[2],
+                input_overlay->width / 2, input_overlay->height / 2,
+                (CUdeviceptr)input_overlay->data[3], input_overlay->linesize[3], 2, 2);
+        }
         break;
     default:
         av_log(ctx, AV_LOG_ERROR, "Passed unsupported overlay pixel format\n");
@@ -450,6 +479,8 @@ static int overlay_cuda_config_output(AV
         return AVERROR(ENOSYS);
     }
 
+    ctx->in_desc_main = av_pix_fmt_desc_get(ctx->in_format_main);
+
     // check overlay input formats
 
     if (!frames_ctx_overlay) {
@@ -503,7 +534,13 @@ static int overlay_cuda_config_output(AV
         return err;
     }
 
-    err = CHECK_CU(cu->cuModuleGetFunction(&ctx->cu_func, ctx->cu_module, "Overlay_Cuda"));
+    err = CHECK_CU(cu->cuModuleGetFunction(&ctx->cu_func_uchar, ctx->cu_module, "Overlay_Cuda_uchar"));
+    if (err < 0) {
+        CHECK_CU(cu->cuCtxPopCurrent(&dummy));
+        return err;
+    }
+
+    err = CHECK_CU(cu->cuModuleGetFunction(&ctx->cu_func_ushort, ctx->cu_module, "Overlay_Cuda_ushort"));
     if (err < 0) {
         CHECK_CU(cu->cuCtxPopCurrent(&dummy));
         return err;
Index: jellyfin-ffmpeg/libavfilter/vf_overlay_cuda.cu
===================================================================
--- libavfilter/vf_overlay_cuda.cu
+++ libavfilter/vf_overlay_cuda.cu
@@ -18,14 +18,15 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
-extern "C" {
-
-__global__ void Overlay_Cuda(
+template<typename T0, typename T1>
+__inline__ __device__ void overlay_func(
     int x_position, int y_position,
-    unsigned char* main, int main_linesize,
-    unsigned char* overlay, int overlay_linesize,
+    T0* main, int main_linesize,
+    int main_adj_x, int main_offset,
+    int main_depth, int main_shift,
+    T1* overlay, int overlay_linesize,
     int overlay_w, int overlay_h,
-    unsigned char* overlay_alpha, int alpha_linesize,
+    T1* overlay_alpha, int alpha_linesize,
     int alpha_adj_x, int alpha_adj_y)
 {
     int x = blockIdx.x * blockDim.x + threadIdx.x;
@@ -44,11 +45,44 @@ __global__ void Overlay_Cuda(
 
     float alpha = 1.0;
     if (alpha_linesize) {
-        alpha = overlay_alpha[alpha_adj_x * overlay_x  + alpha_adj_y * overlay_y * alpha_linesize] / 255.0f;
+        alpha = overlay_alpha[alpha_adj_x * overlay_x + alpha_adj_y * overlay_y * alpha_linesize] / 255.0f;
     }
 
-    main[x + y*main_linesize] = alpha * overlay[overlay_x + overlay_y * overlay_linesize] + (1.0f - alpha) * main[x + y*main_linesize];
+    int main_pos = main_adj_x * x + y * (main_linesize / sizeof(*main)) + (main_adj_x > 1 ? main_offset : 0);
+    if (main_depth > 8) {
+        T0 overlay_res = (T0)(alpha * overlay[overlay_x + overlay_y * overlay_linesize]) << (main_depth - 8);
+        T0 main_res = (T0)((1.0f - alpha) * (main[main_pos] >> main_shift));
+        main[main_pos] = (T0)(overlay_res + main_res) << main_shift;
+    } else {
+        main[main_pos] = alpha * overlay[overlay_x + overlay_y * overlay_linesize] + (1.0f - alpha) * main[main_pos];
+    }
 }
 
+extern "C" {
+
+#define OVERLAY_VARIANT(NAME, TYPE0) \
+__global__ void Overlay_Cuda_ ## NAME( \
+    int x_position, int y_position, \
+    TYPE0* main, int main_linesize, \
+    int main_adj_x, int main_offset, \
+    int main_depth, int main_shift, \
+    unsigned char* overlay, int overlay_linesize, \
+    int overlay_w, int overlay_h, \
+    unsigned char* overlay_alpha, int alpha_linesize, \
+    int alpha_adj_x, int alpha_adj_y) \
+{ \
+    overlay_func( \
+        x_position, y_position, \
+        main, main_linesize, \
+        main_adj_x, main_offset, \
+        main_depth, main_shift, \
+        overlay, overlay_linesize, \
+        overlay_w, overlay_h, \
+        overlay_alpha, alpha_linesize, \
+        alpha_adj_x, alpha_adj_y); \
 }
 
+OVERLAY_VARIANT(uchar, unsigned char)
+OVERLAY_VARIANT(ushort, unsigned short)
+
+}
