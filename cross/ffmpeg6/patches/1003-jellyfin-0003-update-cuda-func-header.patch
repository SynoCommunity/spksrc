Index: jellyfin-ffmpeg/compat/cuda/cuda_runtime.h
===================================================================
--- compat/cuda/cuda_runtime.h
+++ compat/cuda/cuda_runtime.h
@@ -24,6 +24,7 @@
 #define COMPAT_CUDA_CUDA_RUNTIME_H
 
 // Common macros
+#define __constant__ __attribute__((constant))
 #define __global__ __attribute__((global))
 #define __device__ __attribute__((device))
 #define __device_builtin__ __attribute__((device_builtin))
@@ -39,59 +40,59 @@
 // Basic typedefs
 typedef __device_builtin__ unsigned long long cudaTextureObject_t;
 
-typedef struct __device_builtin__ __align__(2) uchar2
-{
-    unsigned char x, y;
-} uchar2;
-
-typedef struct __device_builtin__ __align__(4) ushort2
-{
-    unsigned short x, y;
-} ushort2;
-
-typedef struct __device_builtin__ __align__(8) float2
-{
-    float x, y;
-} float2;
-
-typedef struct __device_builtin__ __align__(8) int2
-{
-    int x, y;
-} int2;
-
-typedef struct __device_builtin__ uint3
-{
-    unsigned int x, y, z;
-} uint3;
-
-typedef struct uint3 dim3;
-
-typedef struct __device_builtin__ __align__(4) uchar4
-{
-    unsigned char x, y, z, w;
-} uchar4;
-
-typedef struct __device_builtin__ __align__(8) ushort4
-{
-    unsigned short x, y, z, w;
-} ushort4;
-
-typedef struct __device_builtin__ __align__(16) int4
-{
-    int x, y, z, w;
-} int4;
+#define MAKE_VECTORS(type, base) \
+typedef struct __device_builtin__ type##1 { \
+    base x; \
+} type##1; \
+static __inline__ __device__ type##1 make_##type##1(base x) { \
+    type##1 ret; \
+    ret.x = x; \
+    return ret; \
+} \
+typedef struct __device_builtin__ __align__(sizeof(base) * 2) type##2 { \
+    base x, y; \
+} type##2; \
+static __inline__ __device__ type##2 make_##type##2(base x, base y) { \
+    type##2 ret; \
+    ret.x = x; \
+    ret.y = y; \
+    return ret; \
+} \
+typedef struct __device_builtin__ type##3 { \
+    base x, y, z; \
+} type##3; \
+static __inline__ __device__ type##3 make_##type##3(base x, base y, base z) { \
+    type##3 ret; \
+    ret.x = x; \
+    ret.y = y; \
+    ret.z = z; \
+    return ret; \
+} \
+typedef struct __device_builtin__ __align__(sizeof(base) * 4) type##4 { \
+    base x, y, z, w; \
+} type##4; \
+static __inline__ __device__ type##4 make_##type##4(base x, base y, base z, base w) { \
+    type##4 ret; \
+    ret.x = x; \
+    ret.y = y; \
+    ret.z = z; \
+    ret.w = w; \
+    return ret; \
+}
 
-typedef struct __device_builtin__ __align__(16) float4
-{
-    float x, y, z, w;
-} float4;
+// Basic initializers
+MAKE_VECTORS(uchar, unsigned char)
+MAKE_VECTORS(ushort, unsigned short)
+MAKE_VECTORS(int, int)
+MAKE_VECTORS(uint, unsigned int)
+MAKE_VECTORS(float, float)
 
 // Accessors for special registers
 #define GETCOMP(reg, comp) \
     asm("mov.u32 %0, %%" #reg "." #comp ";" : "=r"(tmp)); \
     ret.comp = tmp;
 
-#define GET(name, reg) static inline __device__ uint3 name() {\
+#define GET(name, reg) static __inline__ __device__ uint3 name() {\
     uint3 ret; \
     unsigned tmp; \
     GETCOMP(reg, x) \
@@ -109,18 +110,8 @@ GET(getThreadIdx, tid)
 #define blockDim (getBlockDim())
 #define threadIdx (getThreadIdx())
 
-// Basic initializers (simple macros rather than inline functions)
-#define make_int2(a, b) ((int2){.x = a, .y = b})
-#define make_uchar2(a, b) ((uchar2){.x = a, .y = b})
-#define make_ushort2(a, b) ((ushort2){.x = a, .y = b})
-#define make_float2(a, b) ((float2){.x = a, .y = b})
-#define make_int4(a, b, c, d) ((int4){.x = a, .y = b, .z = c, .w = d})
-#define make_uchar4(a, b, c, d) ((uchar4){.x = a, .y = b, .z = c, .w = d})
-#define make_ushort4(a, b, c, d) ((ushort4){.x = a, .y = b, .z = c, .w = d})
-#define make_float4(a, b, c, d) ((float4){.x = a, .y = b, .z = c, .w = d})
-
 // Conversions from the tex instruction's 4-register output to various types
-#define TEX2D(type, ret) static inline __device__ void conv(type* out, unsigned a, unsigned b, unsigned c, unsigned d) {*out = (ret);}
+#define TEX2D(type, ret) static __inline__ __device__ void conv(type* out, unsigned a, unsigned b, unsigned c, unsigned d) {*out = (ret);}
 
 TEX2D(unsigned char, a & 0xFF)
 TEX2D(unsigned short, a & 0xFFFF)
@@ -134,19 +125,19 @@ TEX2D(float4, make_float4(a, b, c, d))
 
 // Template calling tex instruction and converting the output to the selected type
 template<typename T>
-inline __device__ T tex2D(cudaTextureObject_t texObject, float x, float y)
+__inline__ __device__ T tex2D(cudaTextureObject_t texObject, float x, float y)
 {
-  T ret;
-  unsigned ret1, ret2, ret3, ret4;
-  asm("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" :
-      "=r"(ret1), "=r"(ret2), "=r"(ret3), "=r"(ret4) :
-      "l"(texObject), "f"(x), "f"(y));
-  conv(&ret, ret1, ret2, ret3, ret4);
-  return ret;
+    T ret;
+    unsigned ret1, ret2, ret3, ret4;
+    asm("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" :
+        "=r"(ret1), "=r"(ret2), "=r"(ret3), "=r"(ret4) :
+        "l"(texObject), "f"(x), "f"(y));
+    conv(&ret, ret1, ret2, ret3, ret4);
+    return ret;
 }
 
 template<>
-inline __device__ float4 tex2D<float4>(cudaTextureObject_t texObject, float x, float y)
+__inline__ __device__ float4 tex2D<float4>(cudaTextureObject_t texObject, float x, float y)
 {
     float4 ret;
     asm("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" :
@@ -156,37 +147,41 @@ inline __device__ float4 tex2D<float4>(c
 }
 
 template<>
-inline __device__ float tex2D<float>(cudaTextureObject_t texObject, float x, float y)
+__inline__ __device__ float tex2D<float>(cudaTextureObject_t texObject, float x, float y)
 {
     return tex2D<float4>(texObject, x, y).x;
 }
 
 template<>
-inline __device__ float2 tex2D<float2>(cudaTextureObject_t texObject, float x, float y)
+__inline__ __device__ float2 tex2D<float2>(cudaTextureObject_t texObject, float x, float y)
 {
     float4 ret = tex2D<float4>(texObject, x, y);
     return make_float2(ret.x, ret.y);
 }
 
 // Math helper functions
-static inline __device__ float floorf(float a) { return __builtin_floorf(a); }
-static inline __device__ float floor(float a) { return __builtin_floorf(a); }
-static inline __device__ double floor(double a) { return __builtin_floor(a); }
-static inline __device__ float ceilf(float a) { return __builtin_ceilf(a); }
-static inline __device__ float ceil(float a) { return __builtin_ceilf(a); }
-static inline __device__ double ceil(double a) { return __builtin_ceil(a); }
-static inline __device__ float truncf(float a) { return __builtin_truncf(a); }
-static inline __device__ float trunc(float a) { return __builtin_truncf(a); }
-static inline __device__ double trunc(double a) { return __builtin_trunc(a); }
-static inline __device__ float fabsf(float a) { return __builtin_fabsf(a); }
-static inline __device__ float fabs(float a) { return __builtin_fabsf(a); }
-static inline __device__ double fabs(double a) { return __builtin_fabs(a); }
-static inline __device__ float sqrtf(float a) { return __builtin_sqrtf(a); }
-
-static inline __device__ float __saturatef(float a) { return __nvvm_saturate_f(a); }
-static inline __device__ float __sinf(float a) { return __nvvm_sin_approx_f(a); }
-static inline __device__ float __cosf(float a) { return __nvvm_cos_approx_f(a); }
-static inline __device__ float __expf(float a) { return __nvvm_ex2_approx_f(a * (float)__builtin_log2(__builtin_exp(1))); }
-static inline __device__ float __powf(float a, float b) { return __nvvm_ex2_approx_f(__nvvm_lg2_approx_f(a) * b); }
+static __inline__ __device__ float floorf(float a) { return __builtin_floorf(a); }
+static __inline__ __device__ float floor(float a) { return __builtin_floorf(a); }
+static __inline__ __device__ double floor(double a) { return __builtin_floor(a); }
+static __inline__ __device__ float ceilf(float a) { return __builtin_ceilf(a); }
+static __inline__ __device__ float ceil(float a) { return __builtin_ceilf(a); }
+static __inline__ __device__ double ceil(double a) { return __builtin_ceil(a); }
+static __inline__ __device__ float truncf(float a) { return __builtin_truncf(a); }
+static __inline__ __device__ float trunc(float a) { return __builtin_truncf(a); }
+static __inline__ __device__ double trunc(double a) { return __builtin_trunc(a); }
+static __inline__ __device__ float fabsf(float a) { return __builtin_fabsf(a); }
+static __inline__ __device__ float fabs(float a) { return __builtin_fabsf(a); }
+static __inline__ __device__ double fabs(double a) { return __builtin_fabs(a); }
+static __inline__ __device__ float sqrtf(float a) { return __builtin_sqrtf(a); }
+
+static __inline__ __device__ float __saturatef(float a) { return __nvvm_saturate_f(a); }
+static __inline__ __device__ float __sinf(float a) { return __nvvm_sin_approx_f(a); }
+static __inline__ __device__ float __cosf(float a) { return __nvvm_cos_approx_f(a); }
+static __inline__ __device__ float __exp2f(float a) { return __nvvm_ex2_approx_f(a); }
+static __inline__ __device__ float __expf(float a) { return __nvvm_ex2_approx_f(a * 1.4427f); }
+static __inline__ __device__ float __log2f(float a) { return __nvvm_lg2_approx_f(a); }
+static __inline__ __device__ float __logf(float a) { return __nvvm_lg2_approx_f(a) * 0.693147f; }
+static __inline__ __device__ float __log10f(float a) { return __nvvm_lg2_approx_f(a) * 0.30103f; }
+static __inline__ __device__ float __powf(float a, float b) { return __nvvm_ex2_approx_f(__nvvm_lg2_approx_f(a) * b); }
 
 #endif /* COMPAT_CUDA_CUDA_RUNTIME_H */
