Binary files ../ffmpeg-4.3/libavcodec/.libx265.c.swp and ./libavcodec/.libx265.c.swp differ
diff -uprN ../ffmpeg-4.3/libavcodec/vaapi_encode.c ./libavcodec/vaapi_encode.c
--- ../ffmpeg-4.3/libavcodec/vaapi_encode.c	2020-06-15 14:54:24.000000000 -0400
+++ ./libavcodec/vaapi_encode.c	2020-07-05 10:35:03.647873029 -0400
@@ -26,6 +26,8 @@
 
 #include "vaapi_encode.h"
 #include "avcodec.h"
+#include "internal.h"
+#include "packet_internal.h"
 
 const AVCodecHWConfigInternal *ff_vaapi_encode_hw_configs[] = {
     HW_CONFIG_ENCODER_FRAMES(VAAPI, VAAPI),
@@ -587,6 +589,7 @@ static int vaapi_encode_output(AVCodecCo
     int total_size = 0;
     uint8_t *ptr;
     int err;
+    int pict_type;
 
     err = vaapi_encode_wait(avctx, pic);
     if (err < 0)
@@ -624,6 +627,30 @@ static int vaapi_encode_output(AVCodecCo
 
     pkt->pts = pic->pts;
 
+    switch (pic->type) {
+    case PICTURE_TYPE_IDR:
+    case PICTURE_TYPE_I:
+        pict_type = AV_PICTURE_TYPE_I;
+        break;
+    case PICTURE_TYPE_P:
+        pict_type = AV_PICTURE_TYPE_P;
+        break;
+    case PICTURE_TYPE_B:
+        pict_type = AV_PICTURE_TYPE_B;
+        break;
+    default:
+        av_log(avctx, AV_LOG_ERROR, "Unknown picture type encountered.\n");
+        return AVERROR_EXTERNAL;
+    }
+
+#if FF_API_CODED_FRAME
+FF_DISABLE_DEPRECATION_WARNINGS
+    avctx->coded_frame->pict_type = pict_type;
+FF_ENABLE_DEPRECATION_WARNINGS
+#endif
+
+    ff_side_data_set_encoder_stats(pkt, -1, NULL, 0, pict_type);
+
     vas = vaUnmapBuffer(ctx->hwctx->display, pic->output_buffer);
     if (vas != VA_STATUS_SUCCESS) {
         av_log(avctx, AV_LOG_ERROR, "Failed to unmap output buffers: "
