# See https://github.com/SynoCommunity/spksrc/issues/2662
# Remove the extension pgsql because the extension pgsql does not work with the PostgreSQL server from DSM. The Extension pdo_pgsql works perfectly.
--- adminer/drivers/pgsql.inc.php.orig	2025-05-04 16:30:08.000000000 +0000
+++ adminer/drivers/pgsql.inc.php	2025-08-18 19:44:01.107881881 +0000
@@ -6,139 +6,7 @@
 if (isset($_GET["pgsql"])) {
 	define('Adminer\DRIVER', "pgsql");
 
-	if (extension_loaded("pgsql") && $_GET["ext"] != "pdo") {
-		class PgsqlDb extends SqlDb {
-			public $extension = "PgSQL";
-			public $timeout = 0;
-			private $link, $string, $database = true;
-
-			function _error($errno, $error) {
-				if (ini_bool("html_errors")) {
-					$error = html_entity_decode(strip_tags($error));
-				}
-				$error = preg_replace('~^[^:]*: ~', '', $error);
-				$this->error = $error;
-			}
-
-			function attach(?string $server, string $username, string $password): string {
-				$db = adminer()->database();
-				set_error_handler(array($this, '_error'));
-				$this->string = "host='" . str_replace(":", "' port='", addcslashes($server, "'\\")) . "' user='" . addcslashes($username, "'\\") . "' password='" . addcslashes($password, "'\\") . "'";
-				$ssl = adminer()->connectSsl();
-				if (isset($ssl["mode"])) {
-					$this->string .= " sslmode='" . $ssl["mode"] . "'";
-				}
-				$this->link = @pg_connect("$this->string dbname='" . ($db != "" ? addcslashes($db, "'\\") : "postgres") . "'", PGSQL_CONNECT_FORCE_NEW);
-				if (!$this->link && $db != "") {
-					// try to connect directly with database for performance
-					$this->database = false;
-					$this->link = @pg_connect("$this->string dbname='postgres'", PGSQL_CONNECT_FORCE_NEW);
-				}
-				restore_error_handler();
-				if ($this->link) {
-					pg_set_client_encoding($this->link, "UTF8");
-				}
-				return ($this->link ? '' : $this->error);
-			}
-
-			function quote(string $string): string {
-				return (function_exists('pg_escape_literal')
-					? pg_escape_literal($this->link, $string) // available since PHP 5.4.4
-					: "'" . pg_escape_string($this->link, $string) . "'"
-				);
-			}
-
-			function value(?string $val, array $field): ?string {
-				return ($field["type"] == "bytea" && $val !== null ? pg_unescape_bytea($val) : $val);
-			}
-
-			function select_db(string $database) {
-				if ($database == adminer()->database()) {
-					return $this->database;
-				}
-				$return = @pg_connect("$this->string dbname='" . addcslashes($database, "'\\") . "'", PGSQL_CONNECT_FORCE_NEW);
-				if ($return) {
-					$this->link = $return;
-				}
-				return $return;
-			}
-
-			function close() {
-				$this->link = @pg_connect("$this->string dbname='postgres'");
-			}
-
-			function query(string $query, bool $unbuffered = false) {
-				$result = @pg_query($this->link, $query);
-				$this->error = "";
-				if (!$result) {
-					$this->error = pg_last_error($this->link);
-					$return = false;
-				} elseif (!pg_num_fields($result)) {
-					$this->affected_rows = pg_affected_rows($result);
-					$return = true;
-				} else {
-					$return = new Result($result);
-				}
-				if ($this->timeout) {
-					$this->timeout = 0;
-					$this->query("RESET statement_timeout");
-				}
-				return $return;
-			}
-
-			function warnings() {
-				return h(pg_last_notice($this->link)); // second parameter is available since PHP 7.1.0
-			}
-
-			/** Copy from array into a table
-			* @param list<string> $rows
-			*/
-			function copyFrom(string $table, array $rows): bool {
-				$this->error = '';
-				set_error_handler(function (int $errno, string $error): bool {
-					$this->error = (ini_bool('html_errors') ? html_entity_decode($error) : $error);
-					return true;
-				});
-				$return = pg_copy_from($this->link, $table, $rows);
-				restore_error_handler();
-				return $return;
-			}
-		}
-
-		class Result {
-			public $num_rows;
-			private $result, $offset = 0;
-
-			function __construct($result) {
-				$this->result = $result;
-				$this->num_rows = pg_num_rows($result);
-			}
-
-			function fetch_assoc() {
-				return pg_fetch_assoc($this->result);
-			}
-
-			function fetch_row() {
-				return pg_fetch_row($this->result);
-			}
-
-			function fetch_field(): \stdClass {
-				$column = $this->offset++;
-				$return = new \stdClass;
-				$return->orgtable = pg_field_table($this->result, $column);
-				$return->name = pg_field_name($this->result, $column);
-				$type = pg_field_type($this->result, $column);
-				$return->type = (preg_match(number_type(), $type) ? 0 : 15);
-				$return->charsetnr = ($type == "bytea" ? 63 : 0); // 63 - binary
-				return $return;
-			}
-
-			function __destruct() {
-				pg_free_result($this->result);
-			}
-		}
-
-	} elseif (extension_loaded("pdo_pgsql")) {
+	if (extension_loaded("pdo_pgsql")) {
 		class PgsqlDb extends PdoDb {
 			public $extension = "PDO_PgSQL";
 			public $timeout = 0;
