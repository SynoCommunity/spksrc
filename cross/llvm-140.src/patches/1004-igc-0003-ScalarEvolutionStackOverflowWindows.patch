/*========================== begin_copyright_notice ============================

Copyright (C) 2023 Intel Corporation

SPDX-License-Identifier: MIT

============================= end_copyright_notice ===========================*/

/*========================== begin_copyright_notice ============================

Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
See https://llvm.org/LICENSE.txt for license information.
SPDX-License-Identifier: Apache-2.0 with LLVM-exception

============================= end_copyright_notice ===========================*/

# TODO: Once upstreamed, update with LLORG revision & adjust per community review

diff -Naur "a/llvm/include/llvm/Analysis/ScalarEvolution.h" "b/llvm/include/llvm/Analysis/ScalarEvolution.h"
--- "include/llvm/Analysis/ScalarEvolution.h"	2023-12-19 12:51:55.043965800 +0100
+++ "include/llvm/Analysis/ScalarEvolution.h"	2023-12-19 12:28:39.120139600 +0100
@@ -1295,6 +1295,9 @@
   /// Set of Phis processed in createSCEVIter.
   SmallPtrSet<const PHINode*, 6> PendingPhiSCEVIter;
 
+  /// Set of Phis processed in createPhiNodeFromSelectLikePHI.
+  SmallPtrSet<const PHINode*, 6> PendingPhiNodeFromSelectLikePHI;
+
   /// Mark SCEVUnknown Phis currently being processed by getRangeRef.
   SmallPtrSet<const PHINode *, 6> PendingPhiRanges;
 
diff -Naur "a/llvm/lib/Analysis/ScalarEvolution.cpp" "b/llvm/lib/Analysis/ScalarEvolution.cpp"
--- "lib/Analysis/ScalarEvolution.cpp"	2023-12-19 12:52:55.207074600 +0100
+++ "lib/Analysis/ScalarEvolution.cpp"	2023-12-19 12:37:39.188525900 +0100
@@ -5836,11 +5836,18 @@
     auto *BI = dyn_cast<BranchInst>(IDom->getTerminator());
     Value *Cond = nullptr, *LHS = nullptr, *RHS = nullptr;
 
-    if (BI && BI->isConditional() &&
-        BrPHIToSelect(DT, BI, PN, Cond, LHS, RHS) &&
-        IsAvailableOnEntry(L, DT, getSCEV(LHS), PN->getParent()) &&
-        IsAvailableOnEntry(L, DT, getSCEV(RHS), PN->getParent()))
-      return createNodeForSelectOrPHI(PN, Cond, LHS, RHS);
+    // do not run over cycled PHIs while processing createNodeFromSelectLikePHI
+    if (PendingPhiNodeFromSelectLikePHI.insert(PN).second) {
+      const SCEV* S = nullptr;
+      if (BI && BI->isConditional() &&
+         BrPHIToSelect(DT, BI, PN, Cond, LHS, RHS) &&
+         IsAvailableOnEntry(L, DT, getSCEV(LHS), PN->getParent()) &&
+         IsAvailableOnEntry(L, DT, getSCEV(RHS), PN->getParent())) {
+          S = createNodeForSelectOrPHI(PN, Cond, LHS, RHS);
+      }
+      PendingPhiNodeFromSelectLikePHI.erase(PN);
+      return S;
+    }
   }
 
   return nullptr;
