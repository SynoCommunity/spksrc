/*========================== begin_copyright_notice ============================

Copyright (C) 2023 Intel Corporation

SPDX-License-Identifier: MIT

============================= end_copyright_notice ===========================*/

/*========================== begin_copyright_notice ============================

Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
See https://llvm.org/LICENSE.txt for license information.
SPDX-License-Identifier: Apache-2.0 with LLVM-exception

============================= end_copyright_notice ===========================*/

# TODO: Once upstreamed, update with LLORG revision & adjust per community review

diff -Naur "a/llvm/include/llvm/Analysis/ScalarEvolution.h" "b/llvm/include/llvm/Analysis/ScalarEvolution.h"
--- "include/llvm/Analysis/ScalarEvolution.h"	2023-09-27 19:27:08.174510600 +0200
+++ "include/llvm/Analysis/ScalarEvolution.h"	2023-09-27 18:41:11.301171800 +0200
@@ -1292,6 +1292,9 @@
   /// Mark predicate values currently being processed by isImpliedCond.
   SmallPtrSet<const Value *, 6> PendingLoopPredicates;
 
+  /// Set of Phis processed in createSCEVIter.
+  SmallPtrSet<const PHINode*, 6> PendingPhiSCEVIter;
+
   /// Mark SCEVUnknown Phis currently being processed by getRangeRef.
   SmallPtrSet<const PHINode *, 6> PendingPhiRanges;
 
diff -Naur "a/llvm/lib/Analysis/ScalarEvolution.cpp" "b/llvm/lib/Analysis/ScalarEvolution.cpp"
--- "lib/Analysis/ScalarEvolution.cpp"	2023-09-27 19:27:08.189098000 +0200
+++ "lib/Analysis/ScalarEvolution.cpp"	2023-09-27 19:05:40.601713600 +0200
@@ -7004,6 +7004,13 @@
 
   Stack.emplace_back(V, true);
   Stack.emplace_back(V, false);
+
+  if (isa<PHINode>(V) &&
+      !PendingPhiSCEVIter.insert(cast<PHINode>(V)).second) {
+    // cycled back to createSCEVIter while processing this Phi, bail
+    return getUnknown(V);
+  }
+
   while (!Stack.empty()) {
     auto E = Stack.pop_back_val();
     Value *CurV = E.getPointer();
@@ -7016,6 +7023,10 @@
     // If all operands have been visited already, create the SCEV.
     if (E.getInt()) {
       CreatedSCEV = createSCEV(CurV);
+    } else if (isa<PHINode>(CurV) && 
+      PendingPhiSCEVIter.count(cast<PHINode>(CurV)) > 0) {
+      // cycled Phi, try to get its SCEV
+      CreatedSCEV = createSCEV(CurV);
     } else {
       // Otherwise get the operands we need to create SCEV's for before creating
       // the SCEV for CurV. If the SCEV for CurV can be constructed trivially,
@@ -7025,12 +7036,17 @@
 
     if (CreatedSCEV) {
       insertValueToMap(CurV, CreatedSCEV);
+      if (isa<PHINode>(CurV))
+          PendingPhiSCEVIter.erase(cast<PHINode>(CurV));
     } else {
       // Queue CurV for SCEV creation, followed by its's operands which need to
       // be constructed first.
       Stack.emplace_back(CurV, true);
-      for (Value *Op : Ops)
+      if (isa<PHINode>(CurV))
+          PendingPhiSCEVIter.insert(cast<PHINode>(CurV));
+      for (Value *Op : Ops) {
         Stack.emplace_back(Op, false);
+      }
     }
   }
 
@@ -7153,7 +7169,8 @@
     return getUnknown(V);
 
   case Instruction::PHI:
-    // Keep constructing SCEVs' for phis recursively for now.
+    for (auto& Op : cast<PHINode>(U)->operands())
+      Ops.push_back(Op);
     return nullptr;
 
   case Instruction::Select: {
@@ -13405,6 +13422,8 @@
         auto ValueIt = ValueExprMap.find_as(ValueAndOffset.first);
         if (ValueIt != ValueExprMap.end())
           ValueExprMap.erase(ValueIt);
+        if (isa<PHINode>(ValueAndOffset.first))
+          PendingPhiSCEVIter.erase(cast<PHINode>(ValueAndOffset.first));
       }
     }
     ExprValueMap.erase(ExprIt);
