--- module/network/HTTPChunk.py	2015-02-05 16:25:39.000000000 +0100
+++ module/network/HTTPChunk.py	2015-02-05 16:22:40.000000000 +0100
@@ -23,6 +23,7 @@
 from module.utils import fs_encode
 import codecs
 import pycurl
+import urllib
 
 from HTTPRequest import HTTPRequest
 
@@ -248,7 +249,6 @@
         if self.range and self.arrived > self.size:
             return 0 #close if we have enough data
 
-
     def parseHeader(self):
         """parse data from recieved header"""
         for orgline in self.decodeResponse(self.header).splitlines():
@@ -256,8 +256,15 @@
             if line.startswith("accept-ranges") and "bytes" in line:
                 self.p.chunkSupport = True
 
-            if line.startswith("content-disposition") and "filename=" in line:
-                name = orgline.partition("filename=")[2]
+            if line.startswith("content-disposition") and ("filename=" in line or "filename*=" in line):
+                if "filename*=" in line:
+                    # extended version according to RFC 6266 and RFC 5987.
+                    encoding = line.partition("*=")[2].partition("''")[0]
+                    name = orgline.partition("''")[2]
+                    name = urllib.unquote(str(name)).decode(charEnc(encoding))
+                else:
+                    # basic version, US-ASCII only
+                    name = orgline.partition("filename=")[2]
                 name = name.replace('"', "").replace("'", "").replace(";", "").replace("/", "_").strip()
                 self.p.nameDisposition = name
                 self.log.debug("Content-Disposition: %s" % name)
@@ -290,4 +297,10 @@
         """ closes everything, unusable after this """
         if self.fp: self.fp.close()
         self.c.close()
-        if hasattr(self, "p"): del self.p
\ No newline at end of file
+        if hasattr(self, "p"): del self.p
+
+def charEnc(enc):
+    return {
+        'utf-8': 'utf_8',
+        'iso-8859-1': 'latin_1',
+    }.get(enc,'unknown')
