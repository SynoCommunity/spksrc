diff -uprN ../ffmpeg-4.3-005/libavformat/segment.c ./libavformat/segment.c
--- ../ffmpeg-4.3-005/libavformat/segment.c	2020-06-15 14:54:24.000000000 -0400
+++ ./libavformat/segment.c	2020-06-16 19:54:41.332482718 -0400
@@ -43,6 +43,8 @@
 #include "libavutil/time_internal.h"
 #include "libavutil/timestamp.h"
 
+#include "synoconfig.h"
+
 typedef struct SegmentListEntry {
     int index;
     double start_time, end_time;
@@ -123,6 +125,12 @@ typedef struct SegmentContext {
     SegmentListEntry cur_entry;
     SegmentListEntry *segment_list_entries;
     SegmentListEntry *segment_list_entries_end;
+
+#ifdef SYNO_VIDEOSTATION_HLS_SEEK_TIME
+	int64_t seek_time;
+	AVPacket old_key_packet;
+	int filled;
+#endif
 } SegmentContext;
 
 static void print_csv_escaped_str(AVIOContext *ctx, const char *str)
@@ -854,6 +862,10 @@ static int seg_write_header(AVFormatCont
         if (!seg->individual_header_trailer)
             oc->pb->seekable = 0;
     }
+#ifdef SYNO_VIDEOSTATION_HLS_SEEK_TIME
+	av_init_packet(&seg->old_key_packet);
+	seg->filled = 1;
+#endif
 
     return 0;
 }
@@ -885,6 +897,40 @@ static int seg_write_packet(AVFormatCont
         }
     }
 
+#ifdef SYNO_VIDEOSTATION_HLS_SEEK_TIME
+	int64_t pts = AV_NOPTS_VALUE;
+	if (0 < seg->seek_time && seg->filled) {
+		if (pkt->stream_index != seg->reference_stream_index) {
+			return 0;
+		}
+
+		if (pkt->pts != AV_NOPTS_VALUE) {
+			pts = pkt->pts;
+		} else if (pkt->dts != AV_NOPTS_VALUE) {
+			pts = pkt->dts;
+		}
+		if (pts >= 0) {
+			if (pkt->flags & AV_PKT_FLAG_KEY) {
+				seg->filled = 0;
+			} else if (NULL != seg->old_key_packet.data) {
+				seg->old_key_packet.pts = pkt->pts;
+				seg->old_key_packet.dts = pkt->dts;
+				seg->old_key_packet.duration = pkt->duration;
+				av_free_packet(pkt);
+				av_init_packet(pkt);
+				av_copy_packet(pkt, &seg->old_key_packet);
+				seg->filled = 0;
+			}
+			av_free_packet(&seg->old_key_packet);
+		} else {
+			if (pkt->flags & AV_PKT_FLAG_KEY) {
+				av_free_packet(&seg->old_key_packet);
+				av_copy_packet(&seg->old_key_packet, pkt);
+			}
+			return 0;
+		}
+	}
+#endif
 calc_times:
     if (seg->times) {
         end_pts = seg->segment_count < seg->nb_times ?
@@ -971,6 +1017,15 @@ calc_times:
            av_ts2str(pkt->pts), av_ts2timestr(pkt->pts, &st->time_base),
            av_ts2str(pkt->dts), av_ts2timestr(pkt->dts, &st->time_base));
 
+#ifdef SYNO_VIDEOSTATION_HLS_SEEK_TIME
+       if (0 < seg->seek_time) {
+               if (pkt->pts != AV_NOPTS_VALUE)
+                       pkt->pts += av_rescale_q(seg->seek_time, (AVRational) {1, 1000}, st->time_base);
+               if (pkt->dts != AV_NOPTS_VALUE)
+                       pkt->dts += av_rescale_q(seg->seek_time, (AVRational) {1, 1000}, st->time_base);
+       }
+#endif
+
     ret = ff_write_chained(seg->avf, pkt->stream_index, pkt, s,
                            seg->initial_offset || seg->reset_timestamps || seg->avf->oformat->interleave_packet);
 
@@ -1085,6 +1140,9 @@ static const AVOption options[] = {
     { "reset_timestamps", "reset timestamps at the beginning of each segment", OFFSET(reset_timestamps), AV_OPT_TYPE_BOOL, {.i64 = 0}, 0, 1, E },
     { "initial_offset", "set initial timestamp offset", OFFSET(initial_offset), AV_OPT_TYPE_DURATION, {.i64 = 0}, -INT64_MAX, INT64_MAX, E },
     { "write_empty_segments", "allow writing empty 'filler' segments", OFFSET(write_empty), AV_OPT_TYPE_BOOL, {.i64 = 0}, 0, 1, E },
+#ifdef SYNO_VIDEOSTATION_HLS_SEEK_TIME
+    { "hls_seek_time",    "initial segment start time", OFFSET(seek_time), AV_OPT_TYPE_INT64, {.i64 = 0}, 0, INT_MAX, E },
+#endif
     { NULL },
 };
 
Binary files ../ffmpeg-4.3-005/libavformat/.segment.c.rej.swp and ./libavformat/.segment.c.rej.swp differ
diff -uprN ../ffmpeg-4.3-005/synoconfig.h ./synoconfig.h
--- ../ffmpeg-4.3-005/synoconfig.h	1969-12-31 19:00:00.000000000 -0500
+++ ./synoconfig.h	2020-06-16 19:53:14.125668365 -0400
@@ -0,0 +1,12 @@
+#ifndef MY_ABC_HERE
+#define MY_ABC_HERE
+#endif
+
+/* Add ffmpeg option for HLS.
+ * -hls_seek_time:
+ *  Let output fragment ts start with this seek time
+ * See Video Station #1758
+ */
+#if defined(SYNO_VIDEOSTATION)
+#define SYNO_VIDEOSTATION_HLS_SEEK_TIME
+#endif
