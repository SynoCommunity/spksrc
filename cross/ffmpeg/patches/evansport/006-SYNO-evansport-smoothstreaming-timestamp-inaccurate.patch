diff -uprN ../ffmpeg-4.2.1-patch049/libavformat/smoothstreamingenc.c ./libavformat/smoothstreamingenc.c
--- ../ffmpeg-4.2.1-patch049/libavformat/smoothstreamingenc.c	2020-01-17 10:45:12.000000000 -0500
+++ ./libavformat/smoothstreamingenc.c	2020-01-17 10:46:16.613713720 -0500
@@ -83,6 +83,10 @@ typedef struct SmoothStreamingContext {
 	char *fragment_url;
 	int fragment_length;
 	int seek_time;
+#ifdef SYNO_EVANSPORT_SMOOTH_STREAMING_TIMESTAMP_INACCURATE
+	AVPacket old_key_packet;
+	int filled;
+#endif
 #endif
 } SmoothStreamingContext;
 
@@ -420,6 +424,9 @@ static int ism_write_header(AVFormatCont
     }
     ret = write_manifest(s, 0);
 
+#ifdef SYNO_EVANSPORT_SMOOTH_STREAMING_TIMESTAMP_INACCURATE
+	av_init_packet(&c->old_key_packet);
+#endif
 fail:
     if (ret)
         ism_free(s);
@@ -632,6 +639,34 @@ static int ism_write_packet(AVFormatCont
     int64_t end_dts = (c->nb_fragments + 1) * (int64_t) c->min_frag_duration;
     int ret;
 
+#ifdef SYNO_EVANSPORT_SMOOTH_STREAMING_TIMESTAMP_INACCURATE
+	if (c->has_video && 0 != c->seek_time && c->filled) {
+		if (st->codec->codec_type != AVMEDIA_TYPE_VIDEO) {
+			return 0;
+		}
+		if (av_compare_ts(pkt->dts, st->time_base, (int64_t)((int64_t)c->seek_time * (int64_t)1000000), AV_TIME_BASE_Q) >= 0) {
+			if (pkt->flags & AV_PKT_FLAG_KEY) {
+				c->filled = 0;
+			} else if (NULL != c->old_key_packet.data) {
+				c->old_key_packet.pts = pkt->pts;
+				c->old_key_packet.dts = pkt->dts;
+				c->old_key_packet.duration = pkt->duration;
+				av_free_packet(pkt);
+				av_init_packet(pkt);
+				av_copy_packet(pkt, &c->old_key_packet);
+				c->filled = 0;
+			}
+			av_free_packet(&c->old_key_packet);
+		} else {
+			if (pkt->flags & AV_PKT_FLAG_KEY) {
+				av_free_packet(&c->old_key_packet);
+				av_copy_packet(&c->old_key_packet, pkt);
+			}
+			return 0;
+		}
+	}
+#endif
+
     if (st->first_dts == AV_NOPTS_VALUE)
         st->first_dts = pkt->dts;
 
@@ -677,6 +712,9 @@ static const AVOption options[] = {
 	{ "fragment_url", "set fragment url in manifest", OFFSET(fragment_url), AV_OPT_TYPE_STRING, { .str = NULL }, 0, 0, E },
     { "fragment_length", "let file name of output fragment mp4 with the duration (in seconds)", OFFSET(fragment_length), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, E },
     { "seek_time", "add seek time to fragment file (in seconds)", OFFSET(seek_time), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, E },
+#ifdef SYNO_EVANSPORT_SMOOTH_STREAMING_TIMESTAMP_INACCURATE
+    { "filled", "filter out useless frame (hardware transcode)", OFFSET(filled), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, E },
+#endif
 #endif
      { NULL },
 };
diff -uprN ../ffmpeg-4.2.1-patch060-streaming-orig/synoconfig.h ./synoconfig.h
--- ../ffmpeg-4.2.1-patch060-streaming-orig/synoconfig.h	2020-01-18 09:16:26.413624358 -0500
+++ ./synoconfig.h	2020-01-18 09:15:29.473055414 -0500
@@ -98,3 +98,11 @@
 #if defined(SYNO_EVANSPORT_SMD) && defined(SYNO_EVANSPORT_DTV_SMD_AVSYNC)
 #define SYNO_EVANSPORT_HANDBRAKE_MP4
 #endif
+ 
+/* smooth streaming enable hardware transcoding on Evansport.
+ * fixed video not sync with subtitile.
+ * See Video Station #1244
+ */
+#if defined(SYNO_EVANSPORT_SMD)
+#define SYNO_EVANSPORT_SMOOTH_STREAMING_TIMESTAMP_INACCURATE
+#endif
