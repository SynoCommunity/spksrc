--- setup.py.orig	2012-01-13 18:21:31.000000000 +0100
+++ setup.py	2012-02-13 16:03:01.000000000 +0100
@@ -42,7 +42,6 @@
 from distutils.command.build import build
 from distutils.command.build_ext import build_ext
 import os, sys, re
-import struct
 
 if sys.version[0:1] == '1':
     raise RuntimeError ("The Python Cryptography Toolkit requires "
@@ -99,14 +98,6 @@
             w(str(a))
         w(kwd.get("end", "\n"))
 
-def endianness_macro():
-    s = struct.pack("@I", 0x33221100)
-    if s == "\x00\x11\x22\x33".encode():     # little endian
-        return ('PCT_LITTLE_ENDIAN', 1)
-    elif s == "\x33\x22\x11\x00".encode():   # big endian
-        return ('PCT_BIG_ENDIAN', 1)
-    raise AssertionError("Machine is neither little-endian nor big-endian")
-
 class PCTBuildExt (build_ext):
     def build_extensions(self):
         # Detect which modules should be compiled
@@ -267,7 +258,7 @@
         if not os.path.exists("config.status"):
             if os.system("chmod 0755 configure") != 0:
                 raise RuntimeError("chmod error")
-            cmd = "sh configure"    # we use "sh" here so that it'll work on mingw32 with standard python.org binaries
+            cmd = "sh configure cross_compiling=yes ac_cv_func_malloc_0_nonnull=yes"    # we use "sh" here so that it'll work on mingw32 with standard python.org binaries
             if self.verbose < 1:
                 cmd += " -q"
             if os.system(cmd) != 0:
@@ -389,10 +380,6 @@
             Extension("Crypto.Hash._SHA512",
                       include_dirs=['src/'],
                       sources=["src/SHA512.c"]),
-            Extension("Crypto.Hash._RIPEMD160",
-                      include_dirs=['src/'],
-                      sources=["src/RIPEMD160.c"],
-                      define_macros=[endianness_macro()]),
 
             # Block encryption algorithms
             Extension("Crypto.Cipher.AES",
