--- Include/pymacro.h-orig	2023-06-06 22:00:27.000000000 +0000
+++ Include/pymacro.h	2023-07-03 19:36:57.974496974 +0000
@@ -3,23 +3,20 @@
 
 // gh-91782: On FreeBSD 12, if the _POSIX_C_SOURCE and _XOPEN_SOURCE macros are
 // defined, <sys/cdefs.h> disables C11 support and <assert.h> does not define
-// the static_assert() macro.
+// the static_assert() macro. Define the static_assert() macro in Python until
+// <sys/cdefs.h> suports C11:
 // https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=255290
-//
-// macOS <= 10.10 doesn't define static_assert in assert.h at all despite
-// having C11 compiler support.
-//
-// static_assert is defined in glibc from version 2.16. Compiler support for
-// the C11 _Static_assert keyword is in gcc >= 4.6.
-//
-// MSVC makes static_assert a keyword in C11-17, contrary to the standards.
-//
-// In C++11 and C2x, static_assert is a keyword, redefining is undefined
-// behaviour. So only define if building as C (if __STDC_VERSION__ is defined),
-// not C++, and only for C11-17.
-#if !defined(static_assert) && (defined(__GNUC__) || defined(__clang__)) \
-     && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L \
-     && __STDC_VERSION__ <= 201710L
+#if defined(__FreeBSD__) && !defined(static_assert)
+#  define static_assert _Static_assert
+#endif
+
+// static_assert is defined in glibc from version 2.16. Before it requires
+// compiler support (gcc >= 4.6) and is called _Static_assert.
+// In C++ 11 static_assert is a keyword, redefining is undefined behaviour.
+#if (defined(__GLIBC__) \
+     && (__GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ <= 16)) \
+     && !(defined(__cplusplus) && __cplusplus >= 201103L) \
+     && !defined(static_assert))
 #  define static_assert _Static_assert
 #endif
 
