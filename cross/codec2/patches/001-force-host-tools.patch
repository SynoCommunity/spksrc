--- src/CMakeLists.txt-orig	2023-07-19 23:29:48.000000000 +0000
+++ src/CMakeLists.txt	2025-09-29 20:58:59.099005682 +0000
@@ -63,25 +63,39 @@ set(CODEBOOKSNEWAMP2_ENERGY
 
 # when crosscompiling we need a native executable
 if(CMAKE_CROSSCOMPILING)
-    set(CMAKE_DISABLE_SOURCE_CHANGES OFF)
-    include(ExternalProject)
-    ExternalProject_Add(codec2_native
-       SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/..
-       BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/codec2_native
-       BUILD_COMMAND ${CMAKE_COMMAND} --build . --target generate_codebook
-       INSTALL_COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/codec2_native/src/generate_codebook ${CMAKE_CURRENT_BINARY_DIR}
-       BUILD_BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/generate_codebook
+    # Use native tools for build machine
+    if(NOT DEFINED CMAKE_C_COMPILER_FOR_BUILD)
+        find_program(CMAKE_C_COMPILER_FOR_BUILD NAMES gcc cc clang REQUIRED)
+    endif()
+    
+    # Set the path for the native executable
+    set(GENERATE_CODEBOOK_BIN ${CMAKE_CURRENT_BINARY_DIR}/generate_codebook_native)
+    
+    # Build native generate_codebook using host compiler as a custom target
+    add_custom_command(
+        OUTPUT ${GENERATE_CODEBOOK_BIN}
+        COMMAND ${CMAKE_C_COMPILER_FOR_BUILD} 
+                ${CMAKE_CURRENT_SOURCE_DIR}/generate_codebook.c 
+                -o ${GENERATE_CODEBOOK_BIN}
+                -lm
+        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/generate_codebook.c
+        COMMENT "Building native generate_codebook for build machine"
+        VERBATIM
     )
-    add_executable(generate_codebook IMPORTED)
-    set_target_properties(generate_codebook PROPERTIES
-        IMPORTED_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/generate_codebook)
-    add_dependencies(generate_codebook codec2_native)
-    set(CMAKE_DISABLE_SOURCE_CHANGES ON)
+    
+    add_custom_target(generate_codebook_target ALL
+        DEPENDS ${GENERATE_CODEBOOK_BIN}
+    )
+    
 else(CMAKE_CROSSCOMPILING)
-# Build code generator binaries. These do not get installed.
+    # Build code generator binaries. These do not get installed.
     # generate_codebook
     add_executable(generate_codebook generate_codebook.c)
     target_link_libraries(generate_codebook m)
+    
+    # Set the path for the native executable
+    set(GENERATE_CODEBOOK_BIN $<TARGET_FILE:generate_codebook>)
+    
     # Make native builds available for cross-compiling.
     export(TARGETS generate_codebook
         FILE ${CMAKE_BINARY_DIR}/ImportExecutables.cmake)
@@ -91,57 +105,65 @@ endif(CMAKE_CROSSCOMPILING)
 # codebook.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebook.c
-    COMMAND generate_codebook lsp_cb ${CODEBOOKS} > ${CMAKE_CURRENT_BINARY_DIR}/codebook.c
-    DEPENDS generate_codebook ${CODEBOOKS}
+    COMMAND ${GENERATE_CODEBOOK_BIN} lsp_cb ${CODEBOOKS} > ${CMAKE_CURRENT_BINARY_DIR}/codebook.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKS}
+    VERBATIM
 )
 
 # codebookd.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebookd.c
-    COMMAND generate_codebook lsp_cbd ${CODEBOOKSD} > ${CMAKE_CURRENT_BINARY_DIR}/codebookd.c
-    DEPENDS generate_codebook ${CODEBOOKSD}
+    COMMAND ${GENERATE_CODEBOOK_BIN} lsp_cbd ${CODEBOOKSD} > ${CMAKE_CURRENT_BINARY_DIR}/codebookd.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSD}
+    VERBATIM
 )
 
 # codebookjmv.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebookjmv.c
-    COMMAND generate_codebook lsp_cbjmv ${CODEBOOKSJMV} > ${CMAKE_CURRENT_BINARY_DIR}/codebookjmv.c
-    DEPENDS generate_codebook ${CODEBOOKSJMV}
+    COMMAND ${GENERATE_CODEBOOK_BIN} lsp_cbjmv ${CODEBOOKSJMV} > ${CMAKE_CURRENT_BINARY_DIR}/codebookjmv.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSJMV}
+    VERBATIM
 )
 
 # codebookge.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebookge.c
-    COMMAND generate_codebook ge_cb ${CODEBOOKSGE} > ${CMAKE_CURRENT_BINARY_DIR}/codebookge.c
-    DEPENDS generate_codebook ${CODEBOOKSGE}
+    COMMAND ${GENERATE_CODEBOOK_BIN} ge_cb ${CODEBOOKSGE} > ${CMAKE_CURRENT_BINARY_DIR}/codebookge.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSGE}
+    VERBATIM
 )
 
 # codebooknewamp1.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp1.c
-    COMMAND generate_codebook newamp1vq_cb ${CODEBOOKSNEWAMP1} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp1.c
-    DEPENDS generate_codebook ${CODEBOOKSNEWAMP1}
+    COMMAND ${GENERATE_CODEBOOK_BIN} newamp1vq_cb ${CODEBOOKSNEWAMP1} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp1.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSNEWAMP1}
+    VERBATIM
 )
 
 # codebooknewamp1_energy.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp1_energy.c
-    COMMAND generate_codebook newamp1_energy_cb ${CODEBOOKSNEWAMP1_ENERGY} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp1_energy.c
-    DEPENDS generate_codebook ${CODEBOOKSNEWAMP1_ENERGY}
+    COMMAND ${GENERATE_CODEBOOK_BIN} newamp1_energy_cb ${CODEBOOKSNEWAMP1_ENERGY} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp1_energy.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSNEWAMP1_ENERGY}
+    VERBATIM
 )
 
 # codebooknewamp2.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp2.c
-    COMMAND generate_codebook newamp2vq_cb ${CODEBOOKSNEWAMP2} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp2.c
-    DEPENDS generate_codebook ${CODEBOOKSNEWAMP2}
+    COMMAND ${GENERATE_CODEBOOK_BIN} newamp2vq_cb ${CODEBOOKSNEWAMP2} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp2.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSNEWAMP2}
+    VERBATIM
 )
 
 # codebooknewamp2_energy.c
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp2_energy.c
-    COMMAND generate_codebook newamp2_energy_cb ${CODEBOOKSNEWAMP2_ENERGY} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp2_energy.c
-    DEPENDS generate_codebook ${CODEBOOKSNEWAMP2_ENERGY}
+    COMMAND ${GENERATE_CODEBOOK_BIN} newamp2_energy_cb ${CODEBOOKSNEWAMP2_ENERGY} > ${CMAKE_CURRENT_BINARY_DIR}/codebooknewamp2_energy.c
+    DEPENDS ${GENERATE_CODEBOOK_BIN} ${CODEBOOKSNEWAMP2_ENERGY}
+    VERBATIM
 )
 
 #
