diff --git a/Makefile b/Makefile
index 32fa704..4a097e9 100644
--- a/Makefile
+++ b/Makefile
@@ -10,7 +10,7 @@ BUILD_TYPE = RELEASE
 
 VERSION ?= DEV
 CXX ?= g++
-CFLAGS += -c -Wall -Wextra -Wold-style-cast -Woverloaded-virtual -std=c++11 -DVERSION=\"$(VERSION)\" -isystem libs
+CFLAGS += -c -Wall -Wextra -Wold-style-cast -Woverloaded-virtual -std=c++0x -DVERSION=\"$(VERSION)\" -isystem libs
 
 ifeq ($(BUILD_TYPE),DEBUG)
 	CFLAGS+=-ggdb -Og -g
@@ -46,12 +46,7 @@ else
 	UNAME := $(shell uname)
 	ifeq ($(UNAME), Linux)
 		OPEN_HTML=firefox
-		ifeq ($(BUILD_TYPE),DEBUG)
-			LDFLAGS += --static
-		else
-			CFLAGS += -flto
-			LDFLAGS += --static -flto
-		endif
+		LDFLAGS += --static
 	endif
 	ifeq ($(UNAME), OpenBSD)
 		LDFLAGS += -lm -lpthread
diff --git a/src/bridge.cpp b/src/bridge.cpp
index 0133633..0025c46 100644
--- a/src/bridge.cpp
+++ b/src/bridge.cpp
@@ -9,8 +9,9 @@ int bridgeAngle(Polygons outline, SliceLayer* prevLayer)
     //To detect if we have a bridge, first calculate the intersection of the current layer with the previous layer.
     // This gives us the islands that the layer rests on.
     Polygons islands;
-    for(auto prevLayerPart : prevLayer->parts)
+    for(unsigned int n = 0; n<prevLayer->parts.size(); n++)
     {
+        SliceLayerPart prevLayerPart = prevLayer->parts[n];
         if (!boundaryBox.hit(prevLayerPart.boundaryBox))
             continue;
         
diff --git a/src/comb.h b/src/comb.h
index 5cacdd8..6c3c201 100644
--- a/src/comb.h
+++ b/src/comb.h
@@ -2,6 +2,11 @@
 #ifndef COMB_H
 #define COMB_H
 
+#ifndef __STDC_LIMIT_MACROS
+#define __STDC_LIMIT_MACROS
+#include <stdint.h>
+#endif
+
 #include "utils/polygon.h"
 
 namespace cura {
diff --git a/src/fffProcessor.h b/src/fffProcessor.h
index 1b7e05a..4406f77 100644
--- a/src/fffProcessor.h
+++ b/src/fffProcessor.h
@@ -113,7 +113,7 @@ private:
     bool prepareModel(SliceDataStorage& storage, const std::vector<std::string> &files)
     {
         timeKeeper.restart();
-        SimpleModel* model = nullptr;
+        SimpleModel* model = 0;
         if (files.size() == 1 && files[0][0] == '$')
         {
             const char *input_filename = files[0].c_str();
@@ -150,7 +150,7 @@ private:
                 else {
                     cura::log("Loading %s from disk...\n", files[i].c_str());
                     SimpleModel *test = loadModelFromFile(model,files[i].c_str(), config.matrix);
-                    if(test == nullptr) { // error while reading occurred
+                    if(test == 0) { // error while reading occurred
                         cura::logError("Failed to load model: %s\n", files[i].c_str());
                         return false;
                     }
@@ -623,8 +623,10 @@ private:
             }
             
             Polygons skinPolygons;
-            for(Polygons outline : part->skinOutline.splitIntoParts())
+            vector<Polygons> skinOutlineParts = part->skinOutline.splitIntoParts();
+            for(unsigned int partCounter=0; partCounter<skinOutlineParts.size(); partCounter++)
             {
+                Polygons outline = skinOutlineParts[partCounter];
                 int bridge = -1;
                 if (layerNr > 0)
                     bridge = bridgeAngle(outline, &storage.volumes[volumeIdx].layers[layerNr-1]);
@@ -632,7 +634,7 @@ private:
             }
             if (config.enableCombing == COMBING_NOSKIN)
             {
-                gcodeLayer.setCombBoundary(nullptr);
+                gcodeLayer.setCombBoundary(0);
                 gcodeLayer.setAlwaysRetract(true);
             }
             gcodeLayer.addPolygonsByOptimizer(skinPolygons, &skinConfig);
@@ -642,7 +644,7 @@ private:
             if (!config.spiralizeMode || static_cast<int>(layerNr) < config.downSkinCount)
                 gcodeLayer.moveInsideCombBoundary(config.extrusionWidth * 2);
         }
-        gcodeLayer.setCombBoundary(nullptr);
+        gcodeLayer.setCombBoundary(0);
     }
 
     void addInfillToGCode(SliceLayerPart* part, GCodePlanner& gcodeLayer, int layerNr, int extrusionWidth, int fillAngle)
@@ -781,7 +783,7 @@ private:
             if (config.supportType == SUPPORT_TYPE_GRID)
                 gcodeLayer.addPolygonsByOptimizer(island, &supportConfig);
             gcodeLayer.addPolygonsByOptimizer(supportLines, &supportConfig);
-            gcodeLayer.setCombBoundary(nullptr);
+            gcodeLayer.setCombBoundary(0);
         }
     }
 
diff --git a/src/gcodeExport.cpp b/src/gcodeExport.cpp
index 90ab5c2..0e215da 100644
--- a/src/gcodeExport.cpp
+++ b/src/gcodeExport.cpp
@@ -97,7 +97,7 @@ void GCodeExport::setFilename(const char* filename)
 
 bool GCodeExport::isOpened()
 {
-    return f != nullptr;
+    return f != 0;
 }
 
 void GCodeExport::setExtrusion(int layerThickness, int filamentDiameter, int flow)
@@ -449,7 +449,7 @@ GCodePlanner::GCodePlanner(GCodeExport& gcode, int travelSpeed, int retractionMi
 : gcode(gcode), travelConfig(travelSpeed, 0, "travel")
 {
     lastPosition = gcode.getPositionXY();
-    comb = nullptr;
+    comb = 0;
     extrudeSpeedFactor = 100;
     travelSpeedFactor = 100;
     extraTime = 0.0;
@@ -475,7 +475,7 @@ void GCodePlanner::addTravel(Point p)
             path->retract = true;
         }
         forceRetraction = false;
-    }else if (comb != nullptr)
+    }else if (comb != 0)
     {
         vector<Point> pointList;
         if (comb->calc(lastPosition, p, pointList))
@@ -601,7 +601,7 @@ void GCodePlanner::forceMinimalLayerTime(double minTime, int minimalSpeed)
 
 void GCodePlanner::writeGCode(bool liftHeadIfNeeded, int layerThickness)
 {
-    GCodePathConfig* lastConfig = nullptr;
+    GCodePathConfig* lastConfig = 0;
     int extruder = gcode.getExtruderNr();
 
     for(unsigned int n=0; n<paths.size(); n++)
diff --git a/src/gcodeExport.h b/src/gcodeExport.h
index c0a6ee6..9f4371e 100644
--- a/src/gcodeExport.h
+++ b/src/gcodeExport.h
@@ -2,6 +2,10 @@
 #ifndef GCODEEXPORT_H
 #define GCODEEXPORT_H
 
+#ifndef __STDC_LIMIT_MACROS
+#define __STDC_LIMIT_MACROS
+#endif
+
 #include <stdio.h>
 
 #include "settings.h"
@@ -114,7 +118,7 @@ public:
     const char* name;
     bool spiralize;
     
-    GCodePathConfig() : speed(0), lineWidth(0), name(nullptr), spiralize(false) {}
+    GCodePathConfig() : speed(0), lineWidth(0), name(0), spiralize(false) {}
     GCodePathConfig(int speed, int lineWidth, const char* name) : speed(speed), lineWidth(lineWidth), name(name), spiralize(false) {}
     
     void setData(int speed, int lineWidth, const char* name)
@@ -183,7 +187,7 @@ public:
         if (polygons)
             comb = new Comb(*polygons);
         else
-            comb = nullptr;
+            comb = 0;
     }
     
     void setAlwaysRetract(bool alwaysRetract)
diff --git a/src/modelFile/modelFile.cpp b/src/modelFile/modelFile.cpp
index 1ecbb1b..4e07688 100644
--- a/src/modelFile/modelFile.cpp
+++ b/src/modelFile/modelFile.cpp
@@ -7,7 +7,7 @@
 #include "../utils/logoutput.h"
 #include "../utils/string.h"
 
-FILE* binaryMeshBlob = nullptr;
+FILE* binaryMeshBlob = 0;
 
 /* Custom fgets function to support Mac line-ends in Ascii STL files. OpenSCAD produces this when used on Mac */
 void* fgets_(char* ptr, size_t len, FILE* f)
@@ -22,7 +22,7 @@ void* fgets_(char* ptr, size_t len, FILE* f)
         ptr++;
         len--;
     }
-    return nullptr;
+    return 0;
 }
 
 SimpleModel* loadModelSTL_ascii(SimpleModel *m,const char* filename, FMatrix3x3& matrix)
@@ -68,22 +68,22 @@ SimpleModel* loadModelSTL_binary(SimpleModel *m,const char* filename, FMatrix3x3
     if (fread(buffer, 80, 1, f) != 1)
     {
         fclose(f);
-        return nullptr;
+        return 0;
     }
     //Read the face count
     if (fread(&faceCount, sizeof(uint32_t), 1, f) != 1)
     {
         fclose(f);
-        return nullptr;
+        return 0;
     }
     //For each face read:
     //float(x,y,z) = normal, float(X,Y,Z)*3 = vertexes, uint16_t = flags
     m->volumes.push_back(SimpleVolume());
     SimpleVolume* vol = &m->volumes[m->volumes.size()-1];
-	if(vol == nullptr)
+	if(vol == 0)
 	{
 		fclose(f);
-		return nullptr;
+		return 0;
 	}
 
     for(unsigned int i=0;i<faceCount;i++)
@@ -91,13 +91,13 @@ SimpleModel* loadModelSTL_binary(SimpleModel *m,const char* filename, FMatrix3x3
         if (fread(buffer, sizeof(float) * 3, 1, f) != 1)
         {
             fclose(f);
-            return nullptr;
+            return 0;
         }
         float v[9];
         if (fread(v, sizeof(float) * 9, 1, f) != 1)
         {
             fclose(f);
-            return nullptr;
+            return 0;
         }
         Point3 v0 = matrix.apply(FPoint3(v[0], v[1], v[2]));
         Point3 v1 = matrix.apply(FPoint3(v[3], v[4], v[5]));
@@ -106,7 +106,7 @@ SimpleModel* loadModelSTL_binary(SimpleModel *m,const char* filename, FMatrix3x3
         if (fread(buffer, sizeof(uint16_t), 1, f) != 1)
         {
             fclose(f);
-            return nullptr;
+            return 0;
         }
     }
     fclose(f);
@@ -117,13 +117,13 @@ SimpleModel* loadModelSTL(SimpleModel *m,const char* filename, FMatrix3x3& matri
 {
     FILE* f = fopen(filename, "r");
     char buffer[6];
-    if (f == nullptr)
-        return nullptr;
+    if (f == 0)
+        return 0;
 
     if (fread(buffer, 5, 1, f) != 1)
     {
         fclose(f);
-        return nullptr;
+        return 0;
     }
     fclose(f);
 
@@ -132,7 +132,7 @@ SimpleModel* loadModelSTL(SimpleModel *m,const char* filename, FMatrix3x3& matri
     {
         SimpleModel* asciiModel = loadModelSTL_ascii(m, filename, matrix);
         if (!asciiModel)
-            return nullptr;
+            return 0;
 
         // This logic is used to handle the case where the file starts with
         // "solid" but is a binary file.
@@ -153,7 +153,7 @@ SimpleModel* loadModelFromFile(SimpleModel *m,const char* filename, FMatrix3x3&
     {
         return loadModelSTL(m,filename, matrix);
     }
-    if (filename[0] == '#' && binaryMeshBlob != nullptr)
+    if (filename[0] == '#' && binaryMeshBlob != 0)
     {
         while(*filename == '#')
         {
@@ -163,14 +163,14 @@ SimpleModel* loadModelFromFile(SimpleModel *m,const char* filename, FMatrix3x3&
             SimpleVolume* vol = &m->volumes[m->volumes.size()-1];
             int32_t n, pNr = 0;
             if (fread(&n, 1, sizeof(int32_t), binaryMeshBlob) < 1)
-                return nullptr;
+                return 0;
             cura::log("Reading mesh from binary blob with %i vertexes\n", n);
             Point3 v[3];
             while(n)
             {
                 float f[3];
                 if (fread(f, 3, sizeof(float), binaryMeshBlob) < 1)
-                    return nullptr;
+                    return 0;
                 FPoint3 fp(f[0], f[1], f[2]);
                 v[pNr++] = matrix.apply(fp);
                 if (pNr == 3)
@@ -183,5 +183,5 @@ SimpleModel* loadModelFromFile(SimpleModel *m,const char* filename, FMatrix3x3&
         }
         return m;
     }
-    return nullptr;
+    return 0;
 }
diff --git a/src/pathOrderOptimizer.cpp b/src/pathOrderOptimizer.cpp
index e08a41f..48a3ca2 100644
--- a/src/pathOrderOptimizer.cpp
+++ b/src/pathOrderOptimizer.cpp
@@ -46,9 +46,10 @@ void PathOrderOptimizer::optimize()
     {
         int best = -1;
         float bestDist = 0xFFFFFFFFFFFFFFFFLL;
-        
-        for(unsigned int i : location_to_polygon_map[hashPoint(p0)])
+
+        for(unsigned int j=0; j<location_to_polygon_map[hashPoint(p0)].size(); j++)
         {
+            unsigned int i = location_to_polygon_map[hashPoint(p0)][j];
             if (picked[i] || polygons[i].size() < 1)
                 continue;
 
@@ -122,8 +123,9 @@ void PathOrderOptimizer::optimize()
     }
     
     p0 = startPoint;
-    for(int nr : polyOrder)
+    for (unsigned int n=0; n<polyOrder.size(); n++)
     {
+        int nr = polyOrder[n];
         PolygonRef poly = polygons[nr];
         if (poly.size() > 2)
         {
diff --git a/src/sliceDataStorage.h b/src/sliceDataStorage.h
index 01009a0..a46c29d 100644
--- a/src/sliceDataStorage.h
+++ b/src/sliceDataStorage.h
@@ -58,7 +58,7 @@ public:
     int32_t gridScale;
     int32_t gridWidth, gridHeight;
     vector<SupportPoint>* grid;
-   	SupportStorage(){grid = nullptr;}
+   	SupportStorage(){grid = 0;}
 	  ~SupportStorage(){if(grid) delete [] grid;}
 };
 /******************/
diff --git a/src/timeEstimate.cpp b/src/timeEstimate.cpp
index c00b170..8d76d7a 100644
--- a/src/timeEstimate.cpp
+++ b/src/timeEstimate.cpp
@@ -225,7 +225,7 @@ void TimeEstimateCalculator::planner_reverse_pass_kernel(Block *previous, Block
 
 void TimeEstimateCalculator::reverse_pass()
 {
-    Block* block[3] = {nullptr, nullptr, nullptr};
+    Block* block[3] = {0, 0, 0};
     for(unsigned int n=blocks.size()-1; int(n)>=0; n--)
     {
         block[2]= block[1];
@@ -264,7 +264,7 @@ void TimeEstimateCalculator::planner_forward_pass_kernel(Block *previous, Block
 
 void TimeEstimateCalculator::forward_pass()
 {
-    Block* block[3] = {nullptr, nullptr, nullptr};
+    Block* block[3] = {0, 0, 0};
     for(unsigned int n=0; n<blocks.size(); n++)
     {
         block[0]= block[1];
@@ -272,7 +272,7 @@ void TimeEstimateCalculator::forward_pass()
         block[2] = &blocks[n];
         planner_forward_pass_kernel(block[0], block[1], block[2]);
     }
-    planner_forward_pass_kernel(block[1], block[2], nullptr);
+    planner_forward_pass_kernel(block[1], block[2], 0);
 }
 
 // Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
@@ -281,7 +281,7 @@ void TimeEstimateCalculator::forward_pass()
 void TimeEstimateCalculator::recalculate_trapezoids()
 {
     Block *current;
-    Block *next = nullptr;
+    Block *next = 0;
 
     for(unsigned int n=0; n<blocks.size(); n--)
     {
@@ -299,7 +299,7 @@ void TimeEstimateCalculator::recalculate_trapezoids()
         }
     }
     // Last/newest block in buffer. Exit speed is set with MINIMUM_PLANNER_SPEED. Always recalculated.
-    if(next != nullptr)
+    if(next != 0)
     {
         calculate_trapezoid_for_block(next, next->entry_speed/next->nominal_feedrate, MINIMUM_PLANNER_SPEED/next->nominal_feedrate);
         next->recalculate_flag = false;
diff --git a/src/utils/gettime.h b/src/utils/gettime.h
index a8fde6d..3514525 100644
--- a/src/utils/gettime.h
+++ b/src/utils/gettime.h
@@ -15,7 +15,7 @@ static inline double getTime()
     return double(GetTickCount()) / 1000.0;
 #else
     struct timeval tv;
-    gettimeofday(&tv, nullptr);
+    gettimeofday(&tv, 0);
     return double(tv.tv_sec) + double(tv.tv_usec) / 1000000.0;
 #endif
 }
diff --git a/src/utils/polygon.h b/src/utils/polygon.h
index 999e21d..a58fa60 100644
--- a/src/utils/polygon.h
+++ b/src/utils/polygon.h
@@ -25,7 +25,7 @@ class PolygonRef
 {
     ClipperLib::Path* polygon;
     PolygonRef()
-    : polygon(nullptr)
+    : polygon(0)
     {}
 public:
     PolygonRef(ClipperLib::Path& polygon)
