--- configure.orig	2017-02-08 14:55:08.000000000 +0100
+++ configure	2017-02-13 22:18:14.559376804 +0100
@@ -154,6 +154,11 @@
 check_cc_snippet getloadavg '#include <stdlib.h>
 void test() { getloadavg(NULL,0); }'
 
+check_cc_snippet atomic32 '#include <stdint.h>
+int test(int *ptr){
+return __sync_fetch_and_add(ptr, 1);
+}'
+
 check_cc_snippet atomic64 '#include <stdint.h>
 uint64_t test(uint64_t *ptr){
 return __sync_fetch_and_add(ptr, 1);
--- src/atomic.h.orig	2017-02-08 14:55:08.000000000 +0100
+++ src/atomic.h	2017-02-13 22:27:04.460731173 +0100
@@ -30,7 +30,16 @@
 static inline int
 atomic_add(volatile int *ptr, int incr)
 {
+#if ENABLE_ATOMIC32
   return __sync_fetch_and_add(ptr, incr);
+#else
+  int ret;
+  pthread_mutex_lock(&atomic_lock);
+  ret = *ptr;
+  *ptr += incr;
+  pthread_mutex_unlock(&atomic_lock);
+  return ret;
+#endif
 }
 
 static inline uint64_t
@@ -184,7 +193,16 @@
 static inline int
 atomic_exchange(volatile int *ptr, int val)
 {
+#if ENABLE_ATOMIC32
   return  __sync_lock_test_and_set(ptr, val);
+#else
+  int ret;
+  pthread_mutex_lock(&atomic_lock);
+  ret = *ptr;
+  *ptr = new;
+  pthread_mutex_unlock(&atomic_lock);
+  return ret;
+#endif
 }
 
 static inline uint64_t
