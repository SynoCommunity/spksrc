# sockd configuration
# https://www.inet.no/dante/doc/1.4.x/sockd.conf.5.html
# 
# The configuration file for the Dante server controls both access
# controls and logging.  It is divided into three parts; server settings,
# rules, and routes.
# 
# Note that server settings must come before rules and routes.
# 
# A line can be commented out using the standard comment character #.


####### SERVER SETTINGS

# cientmethod
#        Supported values are pam.address, pam.any, none, and rfc931.
clientmethod: none

# compatibility
#        With the sameport keyword, the server attempts to use the same
#        port on the server's external side as the client used on the
#        server's internal side.  This is normally the default, but when
#        this option is given it will be done with privileged ports also,
#        meaning if a client connects to Dante from a privileged port,
#        Dante will attempt to connect to the target destination from a
#        privileged port too.  There can be security issues involved with
#        this, so normally this option should not be set.


# debug  Print debug info to the logs.  The value sets the debug level.


# external
#        The address to be used for outgoing connections.  The address
#        given may be either an IP address or an interface name.  Can be
#        given multiple times for different addresses.
external: eth0


# internal
#        The internal addresses. Connections will only be accepted on
#        these addresses. The address given may be either an IP address
#        or an interface name.
internal: eth0 port = @socks_port@


# libwrap.hosts_access
#        If the server is compiled with libwrap support, determines
#        whether the hosts_access() function should be used for access
#        control. When enabled by setting this value to yes, the libwrap
#        library determines if TCP connections or UDP packets should be
#        immediately dropped or not, typically by consulting
#        /etc/hosts.allow and /etc/hosts.deny. These checks are applied
#        to all traffic, before the rule processing starts. The default
#        value is no (disabled)


# logoutput
#        This value controls where the server sends logoutput.  It can be
#        set to syslog[/facility], stdout, stderr, a filename, or a
#        combination.  The default is nowhere.  Note that if errorlog is
#        also set, there will be a overlap between what is logged there
#        (errors only), and what will be logged here (errors, and
#        everything else).
logoutput: @socks_log@


# socksmethod
#        A list of acceptable authentication methods for socks-rules,
#        listed in order of preference.  It is thus important that you
#        specify these in the desired order, normally with the more
#        secure methods first.
#
#        Supported values are bsdauth, gssapi, none, pam.any,
#        pam.address, pam.username, rfc931, and username,
#
#        If a method is not set in this list it will never be selected.
#        The default is no methods, which means all socks-requests will
#        be blocked.
#
#        See the section on AUTHENTICATION METHODS for an explanation of
#        the different methods and their meaning.
socksmethod: @socks_auth@


# timeout.io
#        The number of seconds an established connection can be idle.
#        The default is 0, meaning forever.  See also the "-n" option in
#        the sockd(8) manpage.
#
#        Individual timeouts can be set for TCP and UDP by suffixing io
#        with ".<protocolname>", i.e. timeout.io.tcp or timeout.io.udp.
#
#        Individual timeouts can also be set within rules, using the same
#        syntax.  The timeout set in the rule will then override the
#        default timeouts for clients matching the rule.
timeout.io: 10


# Userids
#        On platforms providing a privilege-model supported by Dante, the
#        Dante server does not use userid-switching via the seteuid(2)
#        system call.  On other platforms, it is prudent to set the
#        userid to be used by the Dante server to appropriate values.
#        The Dante server can use two different userids, or three if
#        compiled with libwrap support.  They are as follows:
#
# user.privileged
#        Username which will be used for doing privileged operations.  If
#        you need special privileges to read the sockd.conf file or to
#        write the sockd.pid file (you can create it manually before
#        starting sockd), have anything in your configuration that
#        requires binding privileged TCP/UDP ports (ports below 1024), or
#        use some sort of password-based authentication, this probably
#        needs to be set to root.
#
#        If not, you can probably set it to the same value as
#        user.unprivileged.
user.privileged: root
#
# user.unprivileged
#        User which the server runs as most of the time.  This should be
#        an id with as little privileges as possible.  It is recommended
#        that a separate userid is created for this purpose.
user.unprivileged: nobody
#
# user.libwrap
#        User used to execute libwrap commands.  Normally this should be
#        the same as user.unprivileged
user.libwrap: nobody



####### RULES


client pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: error
}

socks block {
    from: 0.0.0.0/0 to: 127.0.0.0/16
    log: error connect disconnect
}

socks block {
    from: 0.0.0.0/0 to: @socks_block@
    log: error connect disconnect
}

socks pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    protocol: tcp
    proxyprotocol: socks_v5
    command: bind connect
    log: error
@socks_auth_group@
}



####### ROUTES


