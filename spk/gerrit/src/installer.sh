#!/bin/sh

# Package
PACKAGE="gerrit"
DNAME="Gerrit"

# Others
INSTALL_DIR="/usr/local/${PACKAGE}"
SSS="/var/packages/${PACKAGE}/scripts/start-stop-status"
JAVA_DIR="/var/packages/JavaManager/target/Java/jre"
GIT_DIR="/usr/local/git"
PATH="${INSTALL_DIR}/bin:${GIT_DIR}/bin:${JAVA_DIR}/bin:${PATH}"
USER="gerrit"
GROUP="users"
GIT="${GIT_DIR}/bin/git"

SERVICETOOL="/usr/syno/bin/servicetool"
FWPORTS="/var/packages/${PACKAGE}/scripts/${PACKAGE}.sc"

#SYNO_GROUP
#SYNO_GROUP_DESC

DEFAULT_PLUGINS="download-commands review"

preinst ()
{
    exit 0
}

postinst ()
{
    # Link
    ln -s ${SYNOPKG_PKGDEST} ${INSTALL_DIR}

    # Install busybox stuff
    ${INSTALL_DIR}/bin/busybox --install ${INSTALL_DIR}/bin

    # Create user
    adduser -h ${INSTALL_DIR} -g "${DNAME} User" -G ${GROUP} -s /bin/sh -S -D ${USER}

    # Correct the file ownership
    chown -R ${USER}:${GROUP} ${INSTALL_DIR}/

    if [ "${SYNOPKG_PKG_STATUS}" != "UPGRADE" ]; then
        initgerrit
    fi

    # Add firewall config
    ${SERVICETOOL} --install-configure-file --package ${FWPORTS} >> /dev/null

    exit 0
}

preuninst ()
{
    # Stop the package
    ${SSS} stop > /dev/null

    # Remove the user (if not upgrading)
    if [ "${SYNOPKG_PKG_STATUS}" != "UPGRADE" ]; then
        delgroup ${USER} ${GROUP}
        deluser ${USER}
    fi

    # Remove firewall config
    if [ "${SYNOPKG_PKG_STATUS}" == "UNINSTALL" ]; then
        ${SERVICETOOL} --remove-configure-file --package ${PACKAGE}.sc >> /dev/null
    fi

    exit 0
}

postuninst ()
{
    # Remove link
    rm -f ${INSTALL_DIR}

    exit 0
}

preupgrade ()
{
    # Stop the package
    ${SSS} stop > /dev/null

    # Save all the working data
    rm -fr ${TMP_DIR}/${PACKAGE}
    mkdir -p ${TMP_DIR}/${PACKAGE}
    for D in data db etc git index lib logs plugins; do
        mv ${INSTALL_DIR}/${D} ${TMP_DIR}/${PACKAGE}/
    done

    exit 0
}

postupgrade ()
{
    # Restore the working data
    for D in data db etc git index lib logs plugins; do
        mkdir -p ${INSTALL_DIR}/${D}
        mv ${TMP_DIR}/${PACKAGE}/${D}/* ${INSTALL_DIR}/${D}/
        chown -R ${USER}:${GROUP} ${INSTALL_DIR}/${D}/
    done
    rm -fr ${TMP_DIR}/${PACKAGE}

    initgerrit

    exit 0
}

initgerrit()
{
    # Initialise Gerrit distribution using the install script and set
    # up the secondary index. This must be run to complete installation,
    # and re-run after restoring working data after an upgrade.

    su ${USER} -c "PATH=${PATH} java -jar ${INSTALL_DIR}/bin/gerrit.war init --batch --no-auto-start --site-path=${INSTALL_DIR} --install-plugin=download-commands --install-plugin=reviewnotes --install-plugin=singleusergroup --install-plugin=replication"
    su ${USER} -c "PATH=${PATH} java -jar ${INSTALL_DIR}/bin/gerrit.war reindex --site-path=${INSTALL_DIR}"

    # Change pid check in script generated by init
    sed -i "s#ps -p \$PID#ls /proc/\$PID#" ${INSTALL_DIR}/bin/gerrit.sh
}

