From 13bda24f224b7ab7272f4172aca0219e612bbb74 Mon Sep 17 00:00:00 2001
From: Bert Wynants <bwynants+drupal-git@gmail.com>
Date: Thu, 4 Jul 2013 20:45:24 +0200
Subject: [PATCH] daemonize changes integrated from xml-template

---
 DNSServer.py   |   6 +++
 PlexConnect.py | 149 +++++++++++++++++++++++++++++++++++++++++++++++++--------
 WebServer.py   |   5 ++
 3 files changed, 141 insertions(+), 19 deletions(-)

diff --git a/DNSServer.py b/DNSServer.py
index 96da94c..39180ee 100755
--- a/DNSServer.py
+++ b/DNSServer.py
@@ -59,6 +59,7 @@ Source: http://doc-tcpip.org/Dns/named.dns.message.html
 import sys
 import socket
 import struct
+import signal
 from multiprocessing import Pipe  # inter process communication
 
 import Settings
@@ -126,6 +127,9 @@ def printDNSPaket(paket):
 
 
 def Run(cmdPipe, param):
+    if not __name__ == '__main__':
+        signal.signal(signal.SIGINT, signal.SIG_IGN)
+
     dinit(__name__, param)  # init logging, DNSServer process
     
     cfg_IP_self = param['IP_self']
@@ -214,6 +218,7 @@ def Run(cmdPipe, param):
                 dprint(__name__, 1, "Warning: DNS error ({0}): {1}", e.errno, e.strerror)
             
     except KeyboardInterrupt:
+        signal.signal(signal.SIGINT, signal.SIG_IGN)  # we heard you!
         dprint(__name__, 0, "^C received.")
     finally:
         dprint(__name__, 0, "Shutting down.")
@@ -223,6 +228,7 @@ def Run(cmdPipe, param):
 
 
 if __name__ == '__main__':
+
     cmdPipe = Pipe()\
     
     cfg = Settings.CSettings()
diff --git a/PlexConnect.py b/PlexConnect.py
index ec84da4..eeb0019 100755
--- a/PlexConnect.py
+++ b/PlexConnect.py
@@ -9,9 +9,11 @@ inter-process-communication (queue): http://pymotw.com/2/multiprocessing/communi
 
 
 import sys, time
-from os import sep
+import os
 import socket
-from multiprocessing import Process, Pipe
+from multiprocessing import Process, Pipe, active_children
+import signal
+import getopt
 
 import PlexGDM
 import DNSServer, WebServer
@@ -19,6 +21,7 @@ import Settings
 from Debug import *  # dprint()
 
 
+
 def getIP_self():
     s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
     s.connect(('1.2.3.4', 1000))
@@ -27,15 +30,86 @@ def getIP_self():
     return IP
 
 
+g_shutdown = False
+g_createpid = False
+g_pidfile = None
+g_daemon = None
+
+
+def shutdown():
+    if p_DNSServer != None:
+        p_DNSServer.join()
+    if p_WebServer != None:
+        p_WebServer.join()
+    if g_createpid:
+        dprint('PlexConnect', 0, "Removing pidfile")
+        os.remove(g_pidfile)
+
+
+def request_shutdown():
+    dprint('PlexConnect', 0,  "Shutting down.")
+    global g_shutdown
+    g_shutdown = True
+    if pipe_DNSServer != None:
+        pipe_DNSServer[0].send('shutdown')
+    if pipe_WebServer != None:
+        pipe_WebServer[0].send('shutdown')
+        
+
+def sighandler_shutdown(signum, frame):
+    request_shutdown();
+
+
+def daemonize():
+    """
+    Fork off as a daemon
+    """
+    dprint('PlexConnect', 0,  "Starting deamon.")
+
+    # pylint: disable=E1101
+    # Make a non-session-leader child process
+    try:
+        pid = os.fork()  # @UndefinedVariable - only available in UNIX
+        if pid != 0:
+            sys.exit(0)
+    except OSError, e:
+        raise RuntimeError("1st fork failed: %s [%d]" % (e.strerror, e.errno))
+
+    os.setsid()  # @UndefinedVariable - only available in UNIX
+
+    # Make sure I can read my own files and shut out others
+    prev = os.umask(0)
+    os.umask(prev and int('077', 8))
+
+    # Make the child a session-leader by detaching from the terminal
+    try:
+        pid = os.fork()  # @UndefinedVariable - only available in UNIX
+        if pid != 0:
+            sys.exit(0)
+    except OSError, e:
+        raise RuntimeError("2nd fork failed: %s [%d]" % (e.strerror, e.errno))
+
+    dev_null = file('/dev/null', 'r')
+    os.dup2(dev_null.fileno(), sys.stdin.fileno())
+
+    global g_createpid, g_createpid
+    if g_createpid:
+        pid = str(os.getpid())
+        dprint('PlexConnect', 0, "Writing PID " + pid + " to " + str(g_pidfile))
+        file(g_pidfile, 'w').write("%s\n" % pid)
+
 
 if __name__=="__main__":
+    signal.signal(signal.SIGINT, sighandler_shutdown)
+    signal.signal(signal.SIGTERM, sighandler_shutdown)
+
     param = {}
-    param['LogFile'] = sys.path[0] + sep + 'PlexConnect.log'
+    param['LogFile'] = sys.path[0] + os.sep + 'PlexConnect.log'
     dinit('PlexConnect', param, True)  # init logging, new file, main process
 
     dprint('PlexConnect', 0, "***")
     dprint('PlexConnect', 0, "PlexConnect")
-    dprint('PlexConnect', 0, "Press ENTER to shut down.")
+    dprint('PlexConnect', 0, "Press CTRL-C to shut down.")
     dprint('PlexConnect', 0, "***")
     
     # Settings
@@ -49,6 +123,42 @@ if __name__=="__main__":
     param['LogLevel'] = cfg.getSetting('loglevel')
     dinit('PlexConnect', param)  # re-init logfile with loglevel
     
+    try:
+        opts, args = getopt.getopt(sys.argv[1:], "dp:", [ 'daemon', 'pidfile='])  # @UnusedVariable
+    except getopt.GetoptError:
+        dprint('PlexConnect', 0, "Available Options:  --daemon, --pidfile filename")
+        sys.exit()
+        
+    for o, a in opts:
+        #dprint('PlexConnect', 0,  "Options: %s Value: %s" % (o, a))
+        # Run as a daemon
+        if o in ('-d', '--daemon'):
+            if sys.platform == 'win32':
+                dprint('PlexConnect', 0, "Daemonize not supported under Windows, starting normally")
+            else:
+                g_daemon = True
+
+        # Write a pidfile if requested
+        if o in ('-p', '--pidfile'):
+            g_pidfile = str(a)
+
+            # If the pidfile already exists, PlexConnect may still be running, so exit
+            if os.path.exists(g_pidfile):
+                sys.exit("PID file '" + g_pidfile + "' already exists. Exiting.")
+
+            # The pidfile is only useful in daemon mode, make sure we can write the file properly
+            if g_daemon:
+                g_createpid = True
+                try:
+                    file(g_pidfile, 'w').write("pid\n")
+                except IOError, e:
+                    raise SystemExit("Unable to write PID file: %s [%d]" % (e.strerror, e.errno))
+            else:
+                dprint('PlexConnect', 0, "Not running in daemon mode. PID file creation disabled")
+                
+    if g_daemon:
+        daemonize()
+
     if cfg.getSetting('enable_dnsserver')=='True':
         pipe_DNSServer = Pipe()  # endpoint [0]-PlexConnect, [1]-DNSServer
     pipe_WebServer = Pipe()  # endpoint [0]-PlexConnect, [1]-WebServer
@@ -73,6 +183,9 @@ if __name__=="__main__":
         time.sleep(0.1)
         if not p_DNSServer.is_alive():
             dprint('PlexConnect', 0, "DNSServer not alive. Shutting down.")
+            p_DNSServer = None;
+            request_shutdown()
+            shutdown()
             sys.exit(1)
     
     p_WebServer = Process(target=WebServer.Run, args=(pipe_WebServer[1], param))
@@ -81,21 +194,19 @@ if __name__=="__main__":
     time.sleep(0.1)
     if not p_WebServer.is_alive():
         dprint('PlexConnect', 0, "WebServer not alive. Shutting down.")
-        if cfg.getSetting('enable_dnsserver')=='True':
-            pipe_DNSServer[0].send('shutdown')
-            p_DNSServer.join()
+        p_WebServer = None;
+        request_shutdown()
+        shutdown()
         sys.exit(1)
     
-    try:
-        key = raw_input()
-    except KeyboardInterrupt:
-        dprint('PlexConnect', 0, "^C received.")
+    # work until shutdown
+    # ...or just wait until child processes are done
+    if sys.platform == 'win32':
+        while g_shutdown==False:
+            # do something important
+            try: 
+                time.sleep(1)
+            except IOError:
+                dprint('PlexConnect', 0, "sleep aborted.") 
     
-    finally:
-        dprint('PlexConnect', 0,  "Shutting down.")
-        if cfg.getSetting('enable_dnsserver')=='True':
-            pipe_DNSServer[0].send('shutdown')
-            p_DNSServer.join()
-        
-        pipe_WebServer[0].send('shutdown')
-        p_WebServer.join()
+    shutdown()
\ No newline at end of file
diff --git a/WebServer.py b/WebServer.py
index 786a555..dcb917f 100755
--- a/WebServer.py
+++ b/WebServer.py
@@ -11,6 +11,7 @@ http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python
 import sys
 import string, cgi, time
 from os import sep
+import signal
 from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
 from multiprocessing import Pipe  # inter process communication
 
@@ -168,6 +169,9 @@ class MyHandler(BaseHTTPRequestHandler):
 
 
 def Run(cmdPipe, param):
+    if not __name__ == '__main__':
+        signal.signal(signal.SIGINT, signal.SIG_IGN)
+
     dinit(__name__, param)  # init logging, WebServer process
     
     cfg_IP_WebServer = param['CSettings'].getSetting('ip_webserver')
@@ -201,6 +205,7 @@ def Run(cmdPipe, param):
             server.handle_request()
     
     except KeyboardInterrupt:
+        signal.signal(signal.SIGINT, signal.SIG_IGN)  # we heard you!
         dprint(__name__, 0,"^C received.")
     finally:
         dprint(__name__, 0, "Shutting down.")
-- 
1.8.1

