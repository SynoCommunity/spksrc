// Configuration File for Shairport Sync
// Commented out settings are generally the defaults, except where noted.

// General Settings
general =
{
//  name = "Shairport Sync Player"; // This is the name the service will advertise to iTunes. The default is "Shairport Sync on <hostname>"
//  mdns_backend = "avahi";   // not used, not tested
//  output_backend = "alsa";  // alsa is default, other possibilities are "stdout", "pulse", "dummy". Only alsa supports synchronisation.
    port = 8303;
    udp_port_base = 8304;     // start allocation UDP ports from this port number
    udp_port_range = 10;      // look for free ports in this number of places, starting at the UDP port base (only three are needed).
//  password = "secret";      // default is no password
//  interpolation = "basic";  // aka "stuffing". Default is "basic", alternative is "soxr"
//  statistics = "no";        // print statistics in the log
//  drift = 88;               // allow this number of frames of drift before correcting it
//  resync_threshold = 2205;  // a synchronisation error greater than this will cause resynchronisation; 0 disables it
//  log_verbosity = 0;        // "0" means no verbosity, "3" is most verbose.
//  ignore_volume_control = "no"; // set this to "yes" if you want the volume to be at 100% no matter what the source's volume control is set to.
};

// Latencies for different sources.
latencies =
{
//  default = 88200;
//  itunes = 99400;
//  airplay = 88200;
//  forkedDaapd = 99400;
};


// How to deal with metadata, including artwork
metadata =
{
//  enabled = "no";
//  include_cover_art = "no";
//  pipe_name = "/tmp/shairport-sync-metadata";
};

// Advanced parameters for controlling how a Shairport Sync runs
sessioncontrol = 
{
//  run_this_before_play_begins = "/path/to/application and args";
//  run_this_after_play_ends = "/path/to/application and args";
//  wait_for_completion = "no";
//  allow_session_interruption = "no";
//  session_timeout = 120;
};

//
// Back End Settings
//

// These are parameters for the alsa back end, the only back end that supports synchronisation
alsa =
{
//  output_device = "default";
//  mixer_type = "software";            // "software" or "hardware"
//  mixer_device = "default";           // actually, the mixer default is whatever the output_device is. Normally you wouldn't have to use this.
//  mixer_control_name = "PCM";         // the name of the mixer to use -- there is no default.
//  audio_backend_latency_offset = 0;   // Set this offset to compensate for a fixed delay in the audio back end. E.g. if the output device delays by 100 ms, set this to -4410.
//  audio_backend_buffer_desired_length = 6615; // If set too small, buffer underflow occurs on low-powered machines. Too long and the response times with software mixer become annoying.
};

// These are parameters for the pipe back end, an experimental back end that directs output to a pipe.
pipe =
{
//  audio_backend_latency_offset = 0;   // Set this offset to compensate for a fixed delay in the audio back end. E.g. if the output device delays by 100 ms, set this to -4410.
//  audio_backend_buffer_desired_length = 44100;
//  name = "/path/to/pipe";             // there is no default pipe name for the output
};

// These are parameters for the stdout audio back end, an experimental back end that directs output to stdout.
stdout =
{
//  audio_backend_latency_offset = 0;   // Set this offset to compensate for a fixed delay in the audio back end. E.g. if the output device delays by 100 ms, set this to -4410.
//  audio_backend_buffer_desired_length = 44100;
};
