# The directory to store the downloaded file.
dir=%dir%

# Enable disk cache. If SIZE is 0, the disk cache is disabled.
# This feature caches the downloaded data in memory, which grows
# to at most SIZE bytes. The cache storage is created for aria2
# instance and shared by all downloads. The one advantage of the
# disk cache is reduce the disk I/O because the data are written
# in larger unit and it is reordered by the offset of the file.
# If hash checking is involved and the data are cached in memory,
# we don’t need to read them from the disk. SIZE can include
# K or M (1K = 1024, 1M = 1024K). Default: 16M
disk-cache=%disk-cache%

# Specify file allocation method. none doesn’t pre-allocate file space.
# prealloc pre-allocates file space before download begins. This may
# take some time depending on the size of the file. If you are using
# newer file systems such as ext4 (with extents support), btrfs,
# xfs or NTFS(MinGW build only), falloc is your best choice.
# It allocates large(few GiB) files almost instantly.
# Don’t use falloc with legacy file systems such as ext3 and FAT32
# because it takes almost same time as prealloc and it blocks aria2
# entirely until allocation finishes. falloc may not be available
# if your system doesn’t have posix_fallocate(3) function. trunc uses
# ftruncate(2) system call or platform-specific counterpart to
# truncate a file to a specified length.
# Possible Values: none, prealloc, trunc, falloc Default: prealloc
file-allocation=%file-allocation%

# Continue downloading a partially downloaded file. Use this option
# to resume a download started by a web browser or another program
# which downloads files sequentially from the beginning. Currently
# this option is only applicable to HTTP(S)/FTP downloads.
continue=true

# The file name of the log file. If - is specified, log is written
# to stdout. If empty string(“”) is specified, or this option is
# omitted, no log is written to disk at all.
log=%log%

# Set log level to output. LEVEL is either debug, info, notice,
# warn or error. Default: debug
log-level=%log-level%

# Downloads the URIs listed in FILE. You can specify multiple sources
# for a single entity by putting multiple URIs on a single line
# separated by the TAB character. Additionally, options can be
# specified after each URI line. Option lines must start with one or
# more white space characters (SPACE or TAB) and must only contain one
# option per line. Input files can use gzip compression. When FILE is
# specified as -, aria2 will read the input from stdin. See the Input
# File subsection for details. See also the --deferred-input option.
# See also the --save-session option.
input-file=%input-file%

# Save error/unfinished downloads to FILE on exit. You can pass this
# output file to aria2c with --input-file option on restart. If you
# like the output to be gzipped append a .gz extension to the file name.
# Please note that downloads added by aria2.addTorrent() and aria2.addMetalink()
# RPC method and whose meta data could not be saved as a file are not saved.
# Downloads removed using aria2.remove() and aria2.forceRemove() will not be
# saved. GID is also saved with gid, but there are some restrictions, see below.
save-session=%save-session%

# Save error/unfinished downloads to a file specified by --save-session
# option every SEC seconds. If 0 is given, file will be saved only
# when aria2 exits. Default: 0
save-session-interval=60

# Save download with --save-session option even if the download is completed
# or removed. This option also saves control file in that situations.
# This may be useful to save BitTorrent seeding which is recognized as
# completed state. Default: false
force-save=true

# Set the maximum number of parallel downloads for every queue item.
# See also the --split option. Default: 5
max-concurrent-downloads=%max-concurrent-downloads%

# The maximum number of connections to one server for each download.
# Default: 1
max-connection-per-server=%max-connection-per-server%

# aria2 does not split less than 2*SIZE byte range. For example, let’s
# consider downloading 20MiB file. If SIZE is 10M, aria2 can split file
# into 2 range [0-10MiB) and [10MiB-20MiB) and download it using 2
# sources(if --split >= 2, of course). If SIZE is 15M, since 2*15M > 20MiB,
# aria2 does not split file and download it using 1 source.
# You can append K or M (1K = 1024, 1M = 1024K).
# Possible Values: 1M -1024M Default: 20M
min-split-size=10M

# Download a file using N connections. If more than N URIs are given,
# first N URIs are used and remaining URIs are used for backup. If less
# than N URIs are given, those URIs are used more than once so that N
# connections total are made simultaneously. The number of connections to
# the same host is restricted by the --max-connection-per-server option.
# See also the --min-split-size option. Default: 5
split=20

# Set max upload speed per each torrent in bytes/sec. 0 means unrestricted.
# You can append K or M (1K = 1024, 1M = 1024K). To limit the overall
# upload speed, use --max-overall-upload-limit option. Default: 0
max-upload-limit=%max-upload-limit%

# Specify share ratio. Seed completed torrents until share ratio reaches RATIO.
# You are strongly encouraged to specify equals or more than 1.0 here.
# Specify 0.0 if you intend to do seeding regardless of share ratio.
# If --seed-time option is specified along with this option, seeding ends
# when at least one of the conditions is satisfied. Default: 1.0
seed-ratio=%seed-ratio%

# Specify seeding time in (fractional) minutes. Also see the --seed-ratio option.
# Specifying --seed-time=0 disables seeding after download completed.
seed-time=%seed-time%

# Exclude seed only downloads when counting concurrent active downloads (See -j option).
# This means that if -j3 is given and this option is turned on and 3 downloads are
# active and one of those enters seed mode, then it is excluded from active download
# count (thus it becomes 2), and the next download waiting in queue gets started.
# But be aware that seeding item is still recognized as active download in RPC method.
# Default: false
bt-detach-seed-only=true

# Enable IPv4 DHT functionality. It also enables UDP tracker support. If a private flag
# is set in a torrent, aria2 doesn’t use DHT for that download even if true is given.
# Default: true
enable-dht=true

# Change the IPv4 DHT routing table file to PATH.
# Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat.
dht-file-path=%dht-file-path%

# Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker. Multiple ports
# can be specified by using ,, for example: 6881,6885.
# You can also use - to specify a range: 6881-6999. , and - can be used together.
# Default: 6881-6999
dht-listen-port=6881-6999

# Enable JSON-RPC/XML-RPC server. It is strongly recommended to set secret authorization
# token using --rpc-secret option. See also --rpc-listen-port option. Default: false
enable-rpc=true

# Listen incoming JSON-RPC/XML-RPC requests on all network interfaces. If false is given,
# listen only on local loopback interface. Default: false
rpc-listen-all=true

# Set RPC secret authorization token. Read RPC authorization secret token to
# know how this option value is used.
rpc-secret=%rpc-secret%
