name: Build

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to build'
        required: true
        default: 'syno-magnet'
      publish:
        description: 'Publish to repository'
        required: false
        default: 'false'
  pull_request:
    paths:
    - 'spk/**'
    - 'cross/**'
    - 'native/**'
  push:
    tags:
      - "*-*"
    branches:
      - "**"
    paths:
    - 'spk/**'
    - 'cross/**'
    - 'native/**'

jobs:
  prepare:
    name: Prepare for Build
    runs-on: ubuntu-latest
    # provide results to other jobs
    outputs:
        arch_packages: ${{ steps.dependencies.outputs.arch_packages }}
        noarch_packages: ${{ steps.dependencies.outputs.noarch_packages }}
        download_packages: ${{ steps.dependencies.outputs.download_packages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
            persist-credentials: false

      - name: Get changed files for pull request
        if: github.event_name == 'pull_request'
        id: getfile_pr
        run: |
          git diff --no-commit-id --name-only -r origin/master...${{github.event.pull_request.head.sha}} | xargs
          echo "::set-output name=files::$(git diff --no-commit-id --name-only -r origin/master...${{github.event.pull_request.head.sha}} | xargs)"

      - name: Get changed files for push
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') == false
        id: getfile
        run: |
          git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | xargs
          echo "::set-output name=files::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | xargs)"

      - name: Evaluate dependencies
        id: dependencies
        run: ./.github/actions/prepare.sh
        env:
          GH_FILES: ${{ steps.getfile.outputs.files }} ${{ steps.getfile_pr.outputs.files }}
          SPK_TO_BUILD: ${{ github.event.inputs.package }}

  download:
    name: Download sources
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
            persist-credentials: false

      - name: Cache downloaded files
        uses: actions/cache@v2
        with:
          path: distrib
          # use run_id in key to cache within workflow only.
          key: distrib-${{ github.run_id }}

      - name: Download source files
        run: ./.github/actions/download.sh
        env:
          DOWNLOAD_PACKAGES: ${{ needs.prepare.outputs.download_packages }}

  build:
    name: Build
    needs: [ download, prepare ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # x64=x86_64, evansport=i686, aarch64=armv8, armv7, hi3535=armv7l, 88f6281=armv5, qoriq=ppc
        # https://github.com/SynoCommunity/spksrc/wiki/Synology-and-SynoCommunity-Package-Architectures
        arch: [noarch, noarch-6.0, noarch-7.0, x64-6.1, x64-7.0, evansport-6.1, evansport-7.0, aarch64-6.1, aarch64-7.0, armv7-6.1, armv7-7.0, hi3535-6.1, 88f6281-6.1, qoriq-6.1]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
            persist-credentials: false

      - name: Cache toolchains
        uses: actions/cache@v2
        with:
          path: toolchain/*/work
          key: toolchain-${{ matrix.arch }}-v2-${{ hashFiles('toolchain/*/digests') }}
          restore-keys: toolchain-${{ matrix.arch }}

      - name: Use cache of downloaded files
        uses: actions/cache@v2
        with:
          path: distrib
          key: distrib-${{ github.run_id }}

      - name: Build Package (file changes)
        if: startsWith(github.ref, 'refs/tags/') == false
        # We don't want to stop the build on errors.
        # Errors are reported in "Build Status"
        continue-on-error: true
        uses: docker://ghcr.io/synocommunity/spksrc:latest
        with:
          entrypoint: ./.github/actions/build.sh
        env:
          ARCH_PACKAGES: ${{ needs.prepare.outputs.arch_packages }}
          NOARCH_PACKAGES: ${{ needs.prepare.outputs.noarch_packages }}
          PUBLISH: ${{ github.event.inputs.publish }}
          API_KEY: ${{ secrets.PUBLISH_API_KEY }}
          # https://github.com/SynoCommunity/spksrc/wiki/Compile-and-build-rules
          GH_ARCH: ${{ matrix.arch }}
          BUILD_ERROR_FILE: /github/workspace/build_errors.txt
          BUILD_ERROR_LOGFILE: /github/workspace/build_log_errors.txt
          BUILD_UNSUPPORTED_FILE: /github/workspace/build_unsupported.txt
          BUILD_SUCCESS_FILE: /github/workspace/build_success.txt

      - name: Build Package (Tag)
        if: startsWith(github.ref, 'refs/tags/')
        # We don't want to stop the build on errors.
        # Errors are reported in "Build Status"
        continue-on-error: true
        uses: docker://ghcr.io/synocommunity/spksrc:latest
        with:
          entrypoint: ./.github/actions/build-tag.sh
        env:
          # https://github.com/SynoCommunity/spksrc/wiki/Compile-and-build-rules
          GH_ARCH: ${{ matrix.arch }}
          API_KEY: ${{ secrets.PUBLISH_API_KEY }}
          BUILD_ERROR_FILE: /github/workspace/build_errors.txt
          BUILD_ERROR_LOGFILE: /github/workspace/build_log_errors.txt
          BUILD_UNSUPPORTED_FILE: /github/workspace/build_unsupported.txt
          BUILD_SUCCESS_FILE: /github/workspace/build_success.txt

      - name: Build Status
        id: build_status
        # We need this status since we don't want to stop the build on errors.
        # Here we fail on build errors found in the build error file.
        uses: docker://ghcr.io/synocommunity/spksrc:latest
        with:
          entrypoint: ./.github/actions/build_status.sh
        env:
          BUILD_ERROR_FILE: /github/workspace/build_errors.txt
          BUILD_ERROR_LOGFILE: /github/workspace/build_log_errors.txt
          BUILD_UNSUPPORTED_FILE: /github/workspace/build_unsupported.txt
          BUILD_SUCCESS_FILE: /github/workspace/build_success.txt

      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: packages/*.spk

  release:
    needs: build
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: 'packages/*.spk'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
